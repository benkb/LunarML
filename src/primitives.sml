(* -*- mode: sml; mode: read-only -*- *)
(* This file was generated by primitives.lua *)
structure Primitives = struct
datatype int_width = INT | I32 | I54 | I64
datatype word_width = WORD | W32 | W64
datatype PrimOp = EQUAL (* = *)
                | call2 (* call2 *)
                | call3 (* call3 *)
                | List_cons (* List.:: *)
                | List_null (* List.null *)
                | List_unsafeHead (* List.unsafeHead *)
                | List_unsafeTail (* List.unsafeTail *)
                | Ref_ref (* Ref.ref *)
                | Ref_EQUAL (* Ref.= *)
                | Ref_set (* Ref.:= *)
                | Ref_read (* Ref.! *)
                | Bool_EQUAL (* Bool.= *)
                | Bool_not (* Bool.not *)
                | Int_EQUAL of int_width (* Int{i}.= *)
                | Int_PLUS of int_width (* Int{i}.+ *)
                | Int_MINUS of int_width (* Int{i}.- *)
                | Int_TIMES of int_width (* Int{i}.* *)
                | Int_div of int_width (* Int{i}.div *)
                | Int_mod of int_width (* Int{i}.mod *)
                | Int_div_unchecked of int_width (* Int{i}.div.unchecked *)
                | Int_mod_unchecked of int_width (* Int{i}.mod.unchecked *)
                | Int_quot of int_width (* Int{i}.quot *)
                | Int_rem of int_width (* Int{i}.rem *)
                | Int_quot_unchecked of int_width (* Int{i}.quot.unchecked *)
                | Int_rem_unchecked of int_width (* Int{i}.rem.unchecked *)
                | Int_TILDE of int_width (* Int{i}.~ *)
                | Int_TILDE_unchecked of int_width (* Int{i}.~.unchecked *)
                | Int_abs of int_width (* Int{i}.abs *)
                | Int_LT of int_width (* Int{i}.< *)
                | Int_LE of int_width (* Int{i}.<= *)
                | Int_GT of int_width (* Int{i}.> *)
                | Int_GE of int_width (* Int{i}.>= *)
                | Word_EQUAL of word_width (* Word{w}.= *)
                | Word_PLUS of word_width (* Word{w}.+ *)
                | Word_MINUS of word_width (* Word{w}.- *)
                | Word_TIMES of word_width (* Word{w}.* *)
                | Word_TILDE of word_width (* Word{w}.~ *)
                | Word_div of word_width (* Word{w}.div *)
                | Word_mod of word_width (* Word{w}.mod *)
                | Word_div_unchecked of word_width (* Word{w}.div.unchecked *)
                | Word_mod_unchecked of word_width (* Word{w}.mod.unchecked *)
                | Word_LT of word_width (* Word{w}.< *)
                | Word_LE of word_width (* Word{w}.<= *)
                | Word_GT of word_width (* Word{w}.> *)
                | Word_GE of word_width (* Word{w}.>= *)
                | Word_notb of word_width (* Word{w}.notb *)
                | Word_andb of word_width (* Word{w}.andb *)
                | Word_orb of word_width (* Word{w}.orb *)
                | Word_xorb of word_width (* Word{w}.xorb *)
                | Word_LSHIFT_unchecked of word_width * word_width (* Word{w}.<<.unchecked{.w} *)
                | Word_RSHIFT_unchecked of word_width * word_width (* Word{w}.>>.unchecked{.w} *)
                | Real_PLUS (* Real.+ *)
                | Real_MINUS (* Real.- *)
                | Real_TIMES (* Real.* *)
                | Real_DIVIDE (* Real./ *)
                | Real_TILDE (* Real.~ *)
                | Real_LT (* Real.< *)
                | Real_LE (* Real.<= *)
                | Real_GT (* Real.> *)
                | Real_GE (* Real.>= *)
                | Char_EQUAL (* Char.= *)
                | Char_LT (* Char.< *)
                | Char_LE (* Char.<= *)
                | Char_GT (* Char.> *)
                | Char_GE (* Char.>= *)
                | Char16_EQUAL (* Char16.= *)
                | Char16_LT (* Char16.< *)
                | Char16_LE (* Char16.<= *)
                | Char16_GT (* Char16.> *)
                | Char16_GE (* Char16.>= *)
                | String_EQUAL (* String.= *)
                | String_LT (* String.< *)
                | String_LE (* String.<= *)
                | String_GT (* String.> *)
                | String_GE (* String.>= *)
                | String_HAT (* String.^ *)
                | String_size of int_width (* String.size{.i} *)
                | String_str (* String.str *)
                | String16_EQUAL (* String16.= *)
                | String16_LT (* String16.< *)
                | String16_LE (* String16.<= *)
                | String16_GT (* String16.> *)
                | String16_GE (* String16.>= *)
                | String16_HAT (* String16.^ *)
                | String16_size of int_width (* String16.size{.i} *)
                | String16_str (* String16.str *)
                | IntInf_EQUAL (* IntInf.= *)
                | IntInf_PLUS (* IntInf.+ *)
                | IntInf_MINUS (* IntInf.- *)
                | IntInf_TIMES (* IntInf.* *)
                | IntInf_TILDE (* IntInf.~ *)
                | IntInf_LT (* IntInf.< *)
                | IntInf_LE (* IntInf.<= *)
                | IntInf_GT (* IntInf.> *)
                | IntInf_GE (* IntInf.>= *)
                | IntInf_andb (* IntInf.andb *)
                | IntInf_orb (* IntInf.orb *)
                | IntInf_xorb (* IntInf.xorb *)
                | IntInf_notb (* IntInf.notb *)
                | IntInf_quot_unchecked (* IntInf.quot.unchecked *)
                | IntInf_rem_unchecked (* IntInf.rem.unchecked *)
                | Vector_length of int_width (* Vector.length{.i} *)
                | Vector_unsafeFromListRevN of int_width (* Vector.unsafeFromListRevN{.i} *)
                | Array_EQUAL (* Array.= *)
                | Array_length of int_width (* Array.length{.i} *)
                | Unsafe_cast (* Unsafe.cast *)
                | Unsafe_Vector_sub of int_width (* Unsafe.Vector.sub{.i} *)
                | Unsafe_Array_sub of int_width (* Unsafe.Array.sub{.i} *)
                | Unsafe_Array_update of int_width (* Unsafe.Array.update{.i} *)
                | Exception_instanceof (* Exception.instanceof *)
                | DelimCont_newPromptTag (* DelimCont.newPromptTag *)
                | DelimCont_pushPrompt (* DelimCont.pushPrompt *)
                | DelimCont_withSubCont (* DelimCont.withSubCont *)
                | DelimCont_pushSubCont (* DelimCont.pushSubCont *)
                | assumeDiscardable (* assumeDiscardable *)
                | Lua_sub (* Lua.sub *)
                | Lua_set (* Lua.set *)
                | Lua_isNil (* Lua.isNil *)
                | Lua_EQUAL (* Lua.== *)
                | Lua_NOTEQUAL (* Lua.~= *)
                | Lua_LT (* Lua.< *)
                | Lua_LE (* Lua.<= *)
                | Lua_GT (* Lua.> *)
                | Lua_GE (* Lua.>= *)
                | Lua_PLUS (* Lua.+ *)
                | Lua_MINUS (* Lua.- *)
                | Lua_TIMES (* Lua.* *)
                | Lua_DIVIDE (* Lua./ *)
                | Lua_INTDIV (* Lua.// *)
                | Lua_MOD (* Lua.% *)
                | Lua_pow (* Lua.pow *)
                | Lua_unm (* Lua.unm *)
                | Lua_andb (* Lua.andb *)
                | Lua_orb (* Lua.orb *)
                | Lua_xorb (* Lua.xorb *)
                | Lua_notb (* Lua.notb *)
                | Lua_LSHIFT (* Lua.<< *)
                | Lua_RSHIFT (* Lua.>> *)
                | Lua_concat (* Lua.concat *)
                | Lua_length (* Lua.length *)
                | Lua_isFalsy (* Lua.isFalsy *)
                | Lua_call (* Lua.call *)
                | Lua_call1 (* Lua.call1 *)
                | Lua_call2 (* Lua.call2 *)
                | Lua_call3 (* Lua.call3 *)
                | Lua_method (* Lua.method *)
                | Lua_global (* Lua.global *)
                | Lua_setGlobal (* Lua.setGlobal *)
                | Lua_newTable (* Lua.newTable *)
                | JavaScript_sub (* JavaScript.sub *)
                | JavaScript_set (* JavaScript.set *)
                | JavaScript_EQUAL (* JavaScript.=== *)
                | JavaScript_NOTEQUAL (* JavaScript.!== *)
                | JavaScript_LT (* JavaScript.< *)
                | JavaScript_LE (* JavaScript.<= *)
                | JavaScript_GT (* JavaScript.> *)
                | JavaScript_GE (* JavaScript.>= *)
                | JavaScript_PLUS (* JavaScript.+ *)
                | JavaScript_MINUS (* JavaScript.- *)
                | JavaScript_TIMES (* JavaScript.* *)
                | JavaScript_DIVIDE (* JavaScript./ *)
                | JavaScript_MOD (* JavaScript.% *)
                | JavaScript_negate (* JavaScript.negate *)
                | JavaScript_andb (* JavaScript.andb *)
                | JavaScript_orb (* JavaScript.orb *)
                | JavaScript_xorb (* JavaScript.xorb *)
                | JavaScript_notb (* JavaScript.notb *)
                | JavaScript_LSHIFT (* JavaScript.<< *)
                | JavaScript_RSHIFT (* JavaScript.>> *)
                | JavaScript_URSHIFT (* JavaScript.>>> *)
                | JavaScript_EXP (* JavaScript.** *)
                | JavaScript_isFalsy (* JavaScript.isFalsy *)
                | JavaScript_typeof (* JavaScript.typeof *)
                | JavaScript_global (* JavaScript.global *)
                | JavaScript_setGlobal (* JavaScript.setGlobal *)
                | JavaScript_call (* JavaScript.call *)
                | JavaScript_method (* JavaScript.method *)
                | JavaScript_new (* JavaScript.new *)
fun toString EQUAL = "="
  | toString call2 = "call2"
  | toString call3 = "call3"
  | toString List_cons = "List.::"
  | toString List_null = "List.null"
  | toString List_unsafeHead = "List.unsafeHead"
  | toString List_unsafeTail = "List.unsafeTail"
  | toString Ref_ref = "Ref.ref"
  | toString Ref_EQUAL = "Ref.="
  | toString Ref_set = "Ref.:="
  | toString Ref_read = "Ref.!"
  | toString Bool_EQUAL = "Bool.="
  | toString Bool_not = "Bool.not"
  | toString (Int_EQUAL INT) = "Int.="
  | toString (Int_EQUAL I32) = "Int32.="
  | toString (Int_EQUAL I54) = "Int54.="
  | toString (Int_EQUAL I64) = "Int64.="
  | toString (Int_PLUS INT) = "Int.+"
  | toString (Int_PLUS I32) = "Int32.+"
  | toString (Int_PLUS I54) = "Int54.+"
  | toString (Int_PLUS I64) = "Int64.+"
  | toString (Int_MINUS INT) = "Int.-"
  | toString (Int_MINUS I32) = "Int32.-"
  | toString (Int_MINUS I54) = "Int54.-"
  | toString (Int_MINUS I64) = "Int64.-"
  | toString (Int_TIMES INT) = "Int.*"
  | toString (Int_TIMES I32) = "Int32.*"
  | toString (Int_TIMES I54) = "Int54.*"
  | toString (Int_TIMES I64) = "Int64.*"
  | toString (Int_div INT) = "Int.div"
  | toString (Int_div I32) = "Int32.div"
  | toString (Int_div I54) = "Int54.div"
  | toString (Int_div I64) = "Int64.div"
  | toString (Int_mod INT) = "Int.mod"
  | toString (Int_mod I32) = "Int32.mod"
  | toString (Int_mod I54) = "Int54.mod"
  | toString (Int_mod I64) = "Int64.mod"
  | toString (Int_div_unchecked INT) = "Int.div.unchecked"
  | toString (Int_div_unchecked I32) = "Int32.div.unchecked"
  | toString (Int_div_unchecked I54) = "Int54.div.unchecked"
  | toString (Int_div_unchecked I64) = "Int64.div.unchecked"
  | toString (Int_mod_unchecked INT) = "Int.mod.unchecked"
  | toString (Int_mod_unchecked I32) = "Int32.mod.unchecked"
  | toString (Int_mod_unchecked I54) = "Int54.mod.unchecked"
  | toString (Int_mod_unchecked I64) = "Int64.mod.unchecked"
  | toString (Int_quot INT) = "Int.quot"
  | toString (Int_quot I32) = "Int32.quot"
  | toString (Int_quot I54) = "Int54.quot"
  | toString (Int_quot I64) = "Int64.quot"
  | toString (Int_rem INT) = "Int.rem"
  | toString (Int_rem I32) = "Int32.rem"
  | toString (Int_rem I54) = "Int54.rem"
  | toString (Int_rem I64) = "Int64.rem"
  | toString (Int_quot_unchecked INT) = "Int.quot.unchecked"
  | toString (Int_quot_unchecked I32) = "Int32.quot.unchecked"
  | toString (Int_quot_unchecked I54) = "Int54.quot.unchecked"
  | toString (Int_quot_unchecked I64) = "Int64.quot.unchecked"
  | toString (Int_rem_unchecked INT) = "Int.rem.unchecked"
  | toString (Int_rem_unchecked I32) = "Int32.rem.unchecked"
  | toString (Int_rem_unchecked I54) = "Int54.rem.unchecked"
  | toString (Int_rem_unchecked I64) = "Int64.rem.unchecked"
  | toString (Int_TILDE INT) = "Int.~"
  | toString (Int_TILDE I32) = "Int32.~"
  | toString (Int_TILDE I54) = "Int54.~"
  | toString (Int_TILDE I64) = "Int64.~"
  | toString (Int_TILDE_unchecked INT) = "Int.~.unchecked"
  | toString (Int_TILDE_unchecked I32) = "Int32.~.unchecked"
  | toString (Int_TILDE_unchecked I54) = "Int54.~.unchecked"
  | toString (Int_TILDE_unchecked I64) = "Int64.~.unchecked"
  | toString (Int_abs INT) = "Int.abs"
  | toString (Int_abs I32) = "Int32.abs"
  | toString (Int_abs I54) = "Int54.abs"
  | toString (Int_abs I64) = "Int64.abs"
  | toString (Int_LT INT) = "Int.<"
  | toString (Int_LT I32) = "Int32.<"
  | toString (Int_LT I54) = "Int54.<"
  | toString (Int_LT I64) = "Int64.<"
  | toString (Int_LE INT) = "Int.<="
  | toString (Int_LE I32) = "Int32.<="
  | toString (Int_LE I54) = "Int54.<="
  | toString (Int_LE I64) = "Int64.<="
  | toString (Int_GT INT) = "Int.>"
  | toString (Int_GT I32) = "Int32.>"
  | toString (Int_GT I54) = "Int54.>"
  | toString (Int_GT I64) = "Int64.>"
  | toString (Int_GE INT) = "Int.>="
  | toString (Int_GE I32) = "Int32.>="
  | toString (Int_GE I54) = "Int54.>="
  | toString (Int_GE I64) = "Int64.>="
  | toString (Word_EQUAL WORD) = "Word.="
  | toString (Word_EQUAL W32) = "Word32.="
  | toString (Word_EQUAL W64) = "Word64.="
  | toString (Word_PLUS WORD) = "Word.+"
  | toString (Word_PLUS W32) = "Word32.+"
  | toString (Word_PLUS W64) = "Word64.+"
  | toString (Word_MINUS WORD) = "Word.-"
  | toString (Word_MINUS W32) = "Word32.-"
  | toString (Word_MINUS W64) = "Word64.-"
  | toString (Word_TIMES WORD) = "Word.*"
  | toString (Word_TIMES W32) = "Word32.*"
  | toString (Word_TIMES W64) = "Word64.*"
  | toString (Word_TILDE WORD) = "Word.~"
  | toString (Word_TILDE W32) = "Word32.~"
  | toString (Word_TILDE W64) = "Word64.~"
  | toString (Word_div WORD) = "Word.div"
  | toString (Word_div W32) = "Word32.div"
  | toString (Word_div W64) = "Word64.div"
  | toString (Word_mod WORD) = "Word.mod"
  | toString (Word_mod W32) = "Word32.mod"
  | toString (Word_mod W64) = "Word64.mod"
  | toString (Word_div_unchecked WORD) = "Word.div.unchecked"
  | toString (Word_div_unchecked W32) = "Word32.div.unchecked"
  | toString (Word_div_unchecked W64) = "Word64.div.unchecked"
  | toString (Word_mod_unchecked WORD) = "Word.mod.unchecked"
  | toString (Word_mod_unchecked W32) = "Word32.mod.unchecked"
  | toString (Word_mod_unchecked W64) = "Word64.mod.unchecked"
  | toString (Word_LT WORD) = "Word.<"
  | toString (Word_LT W32) = "Word32.<"
  | toString (Word_LT W64) = "Word64.<"
  | toString (Word_LE WORD) = "Word.<="
  | toString (Word_LE W32) = "Word32.<="
  | toString (Word_LE W64) = "Word64.<="
  | toString (Word_GT WORD) = "Word.>"
  | toString (Word_GT W32) = "Word32.>"
  | toString (Word_GT W64) = "Word64.>"
  | toString (Word_GE WORD) = "Word.>="
  | toString (Word_GE W32) = "Word32.>="
  | toString (Word_GE W64) = "Word64.>="
  | toString (Word_notb WORD) = "Word.notb"
  | toString (Word_notb W32) = "Word32.notb"
  | toString (Word_notb W64) = "Word64.notb"
  | toString (Word_andb WORD) = "Word.andb"
  | toString (Word_andb W32) = "Word32.andb"
  | toString (Word_andb W64) = "Word64.andb"
  | toString (Word_orb WORD) = "Word.orb"
  | toString (Word_orb W32) = "Word32.orb"
  | toString (Word_orb W64) = "Word64.orb"
  | toString (Word_xorb WORD) = "Word.xorb"
  | toString (Word_xorb W32) = "Word32.xorb"
  | toString (Word_xorb W64) = "Word64.xorb"
  | toString (Word_LSHIFT_unchecked (WORD, WORD)) = "Word.<<.unchecked"
  | toString (Word_LSHIFT_unchecked (WORD, W32)) = "Word.<<.unchecked.w32"
  | toString (Word_LSHIFT_unchecked (WORD, W64)) = "Word.<<.unchecked.w64"
  | toString (Word_LSHIFT_unchecked (W32, WORD)) = "Word32.<<.unchecked"
  | toString (Word_LSHIFT_unchecked (W32, W32)) = "Word32.<<.unchecked.w32"
  | toString (Word_LSHIFT_unchecked (W32, W64)) = "Word32.<<.unchecked.w64"
  | toString (Word_LSHIFT_unchecked (W64, WORD)) = "Word64.<<.unchecked"
  | toString (Word_LSHIFT_unchecked (W64, W32)) = "Word64.<<.unchecked.w32"
  | toString (Word_LSHIFT_unchecked (W64, W64)) = "Word64.<<.unchecked.w64"
  | toString (Word_RSHIFT_unchecked (WORD, WORD)) = "Word.>>.unchecked"
  | toString (Word_RSHIFT_unchecked (WORD, W32)) = "Word.>>.unchecked.w32"
  | toString (Word_RSHIFT_unchecked (WORD, W64)) = "Word.>>.unchecked.w64"
  | toString (Word_RSHIFT_unchecked (W32, WORD)) = "Word32.>>.unchecked"
  | toString (Word_RSHIFT_unchecked (W32, W32)) = "Word32.>>.unchecked.w32"
  | toString (Word_RSHIFT_unchecked (W32, W64)) = "Word32.>>.unchecked.w64"
  | toString (Word_RSHIFT_unchecked (W64, WORD)) = "Word64.>>.unchecked"
  | toString (Word_RSHIFT_unchecked (W64, W32)) = "Word64.>>.unchecked.w32"
  | toString (Word_RSHIFT_unchecked (W64, W64)) = "Word64.>>.unchecked.w64"
  | toString Real_PLUS = "Real.+"
  | toString Real_MINUS = "Real.-"
  | toString Real_TIMES = "Real.*"
  | toString Real_DIVIDE = "Real./"
  | toString Real_TILDE = "Real.~"
  | toString Real_LT = "Real.<"
  | toString Real_LE = "Real.<="
  | toString Real_GT = "Real.>"
  | toString Real_GE = "Real.>="
  | toString Char_EQUAL = "Char.="
  | toString Char_LT = "Char.<"
  | toString Char_LE = "Char.<="
  | toString Char_GT = "Char.>"
  | toString Char_GE = "Char.>="
  | toString Char16_EQUAL = "Char16.="
  | toString Char16_LT = "Char16.<"
  | toString Char16_LE = "Char16.<="
  | toString Char16_GT = "Char16.>"
  | toString Char16_GE = "Char16.>="
  | toString String_EQUAL = "String.="
  | toString String_LT = "String.<"
  | toString String_LE = "String.<="
  | toString String_GT = "String.>"
  | toString String_GE = "String.>="
  | toString String_HAT = "String.^"
  | toString (String_size INT) = "String.size"
  | toString (String_size I32) = "String.size.i32"
  | toString (String_size I54) = "String.size.i54"
  | toString (String_size I64) = "String.size.i64"
  | toString String_str = "String.str"
  | toString String16_EQUAL = "String16.="
  | toString String16_LT = "String16.<"
  | toString String16_LE = "String16.<="
  | toString String16_GT = "String16.>"
  | toString String16_GE = "String16.>="
  | toString String16_HAT = "String16.^"
  | toString (String16_size INT) = "String16.size"
  | toString (String16_size I32) = "String16.size.i32"
  | toString (String16_size I54) = "String16.size.i54"
  | toString (String16_size I64) = "String16.size.i64"
  | toString String16_str = "String16.str"
  | toString IntInf_EQUAL = "IntInf.="
  | toString IntInf_PLUS = "IntInf.+"
  | toString IntInf_MINUS = "IntInf.-"
  | toString IntInf_TIMES = "IntInf.*"
  | toString IntInf_TILDE = "IntInf.~"
  | toString IntInf_LT = "IntInf.<"
  | toString IntInf_LE = "IntInf.<="
  | toString IntInf_GT = "IntInf.>"
  | toString IntInf_GE = "IntInf.>="
  | toString IntInf_andb = "IntInf.andb"
  | toString IntInf_orb = "IntInf.orb"
  | toString IntInf_xorb = "IntInf.xorb"
  | toString IntInf_notb = "IntInf.notb"
  | toString IntInf_quot_unchecked = "IntInf.quot.unchecked"
  | toString IntInf_rem_unchecked = "IntInf.rem.unchecked"
  | toString (Vector_length INT) = "Vector.length"
  | toString (Vector_length I32) = "Vector.length.i32"
  | toString (Vector_length I54) = "Vector.length.i54"
  | toString (Vector_length I64) = "Vector.length.i64"
  | toString (Vector_unsafeFromListRevN INT) = "Vector.unsafeFromListRevN"
  | toString (Vector_unsafeFromListRevN I32) = "Vector.unsafeFromListRevN.i32"
  | toString (Vector_unsafeFromListRevN I54) = "Vector.unsafeFromListRevN.i54"
  | toString (Vector_unsafeFromListRevN I64) = "Vector.unsafeFromListRevN.i64"
  | toString Array_EQUAL = "Array.="
  | toString (Array_length INT) = "Array.length"
  | toString (Array_length I32) = "Array.length.i32"
  | toString (Array_length I54) = "Array.length.i54"
  | toString (Array_length I64) = "Array.length.i64"
  | toString Unsafe_cast = "Unsafe.cast"
  | toString (Unsafe_Vector_sub INT) = "Unsafe.Vector.sub"
  | toString (Unsafe_Vector_sub I32) = "Unsafe.Vector.sub.i32"
  | toString (Unsafe_Vector_sub I54) = "Unsafe.Vector.sub.i54"
  | toString (Unsafe_Vector_sub I64) = "Unsafe.Vector.sub.i64"
  | toString (Unsafe_Array_sub INT) = "Unsafe.Array.sub"
  | toString (Unsafe_Array_sub I32) = "Unsafe.Array.sub.i32"
  | toString (Unsafe_Array_sub I54) = "Unsafe.Array.sub.i54"
  | toString (Unsafe_Array_sub I64) = "Unsafe.Array.sub.i64"
  | toString (Unsafe_Array_update INT) = "Unsafe.Array.update"
  | toString (Unsafe_Array_update I32) = "Unsafe.Array.update.i32"
  | toString (Unsafe_Array_update I54) = "Unsafe.Array.update.i54"
  | toString (Unsafe_Array_update I64) = "Unsafe.Array.update.i64"
  | toString Exception_instanceof = "Exception.instanceof"
  | toString DelimCont_newPromptTag = "DelimCont.newPromptTag"
  | toString DelimCont_pushPrompt = "DelimCont.pushPrompt"
  | toString DelimCont_withSubCont = "DelimCont.withSubCont"
  | toString DelimCont_pushSubCont = "DelimCont.pushSubCont"
  | toString assumeDiscardable = "assumeDiscardable"
  | toString Lua_sub = "Lua.sub"
  | toString Lua_set = "Lua.set"
  | toString Lua_isNil = "Lua.isNil"
  | toString Lua_EQUAL = "Lua.=="
  | toString Lua_NOTEQUAL = "Lua.~="
  | toString Lua_LT = "Lua.<"
  | toString Lua_LE = "Lua.<="
  | toString Lua_GT = "Lua.>"
  | toString Lua_GE = "Lua.>="
  | toString Lua_PLUS = "Lua.+"
  | toString Lua_MINUS = "Lua.-"
  | toString Lua_TIMES = "Lua.*"
  | toString Lua_DIVIDE = "Lua./"
  | toString Lua_INTDIV = "Lua.//"
  | toString Lua_MOD = "Lua.%"
  | toString Lua_pow = "Lua.pow"
  | toString Lua_unm = "Lua.unm"
  | toString Lua_andb = "Lua.andb"
  | toString Lua_orb = "Lua.orb"
  | toString Lua_xorb = "Lua.xorb"
  | toString Lua_notb = "Lua.notb"
  | toString Lua_LSHIFT = "Lua.<<"
  | toString Lua_RSHIFT = "Lua.>>"
  | toString Lua_concat = "Lua.concat"
  | toString Lua_length = "Lua.length"
  | toString Lua_isFalsy = "Lua.isFalsy"
  | toString Lua_call = "Lua.call"
  | toString Lua_call1 = "Lua.call1"
  | toString Lua_call2 = "Lua.call2"
  | toString Lua_call3 = "Lua.call3"
  | toString Lua_method = "Lua.method"
  | toString Lua_global = "Lua.global"
  | toString Lua_setGlobal = "Lua.setGlobal"
  | toString Lua_newTable = "Lua.newTable"
  | toString JavaScript_sub = "JavaScript.sub"
  | toString JavaScript_set = "JavaScript.set"
  | toString JavaScript_EQUAL = "JavaScript.==="
  | toString JavaScript_NOTEQUAL = "JavaScript.!=="
  | toString JavaScript_LT = "JavaScript.<"
  | toString JavaScript_LE = "JavaScript.<="
  | toString JavaScript_GT = "JavaScript.>"
  | toString JavaScript_GE = "JavaScript.>="
  | toString JavaScript_PLUS = "JavaScript.+"
  | toString JavaScript_MINUS = "JavaScript.-"
  | toString JavaScript_TIMES = "JavaScript.*"
  | toString JavaScript_DIVIDE = "JavaScript./"
  | toString JavaScript_MOD = "JavaScript.%"
  | toString JavaScript_negate = "JavaScript.negate"
  | toString JavaScript_andb = "JavaScript.andb"
  | toString JavaScript_orb = "JavaScript.orb"
  | toString JavaScript_xorb = "JavaScript.xorb"
  | toString JavaScript_notb = "JavaScript.notb"
  | toString JavaScript_LSHIFT = "JavaScript.<<"
  | toString JavaScript_RSHIFT = "JavaScript.>>"
  | toString JavaScript_URSHIFT = "JavaScript.>>>"
  | toString JavaScript_EXP = "JavaScript.**"
  | toString JavaScript_isFalsy = "JavaScript.isFalsy"
  | toString JavaScript_typeof = "JavaScript.typeof"
  | toString JavaScript_global = "JavaScript.global"
  | toString JavaScript_setGlobal = "JavaScript.setGlobal"
  | toString JavaScript_call = "JavaScript.call"
  | toString JavaScript_method = "JavaScript.method"
  | toString JavaScript_new = "JavaScript.new"
fun fromString "=" = SOME EQUAL
  | fromString "call2" = SOME call2
  | fromString "call3" = SOME call3
  | fromString "List.::" = SOME List_cons
  | fromString "List.null" = SOME List_null
  | fromString "List.unsafeHead" = SOME List_unsafeHead
  | fromString "List.unsafeTail" = SOME List_unsafeTail
  | fromString "Ref.ref" = SOME Ref_ref
  | fromString "Ref.=" = SOME Ref_EQUAL
  | fromString "Ref.:=" = SOME Ref_set
  | fromString "Ref.!" = SOME Ref_read
  | fromString "Bool.=" = SOME Bool_EQUAL
  | fromString "Bool.not" = SOME Bool_not
  | fromString "Int.=" = SOME (Int_EQUAL INT)
  | fromString "Int32.=" = SOME (Int_EQUAL I32)
  | fromString "Int54.=" = SOME (Int_EQUAL I54)
  | fromString "Int64.=" = SOME (Int_EQUAL I64)
  | fromString "Int.+" = SOME (Int_PLUS INT)
  | fromString "Int32.+" = SOME (Int_PLUS I32)
  | fromString "Int54.+" = SOME (Int_PLUS I54)
  | fromString "Int64.+" = SOME (Int_PLUS I64)
  | fromString "Int.-" = SOME (Int_MINUS INT)
  | fromString "Int32.-" = SOME (Int_MINUS I32)
  | fromString "Int54.-" = SOME (Int_MINUS I54)
  | fromString "Int64.-" = SOME (Int_MINUS I64)
  | fromString "Int.*" = SOME (Int_TIMES INT)
  | fromString "Int32.*" = SOME (Int_TIMES I32)
  | fromString "Int54.*" = SOME (Int_TIMES I54)
  | fromString "Int64.*" = SOME (Int_TIMES I64)
  | fromString "Int.div" = SOME (Int_div INT)
  | fromString "Int32.div" = SOME (Int_div I32)
  | fromString "Int54.div" = SOME (Int_div I54)
  | fromString "Int64.div" = SOME (Int_div I64)
  | fromString "Int.mod" = SOME (Int_mod INT)
  | fromString "Int32.mod" = SOME (Int_mod I32)
  | fromString "Int54.mod" = SOME (Int_mod I54)
  | fromString "Int64.mod" = SOME (Int_mod I64)
  | fromString "Int.div.unchecked" = SOME (Int_div_unchecked INT)
  | fromString "Int32.div.unchecked" = SOME (Int_div_unchecked I32)
  | fromString "Int54.div.unchecked" = SOME (Int_div_unchecked I54)
  | fromString "Int64.div.unchecked" = SOME (Int_div_unchecked I64)
  | fromString "Int.mod.unchecked" = SOME (Int_mod_unchecked INT)
  | fromString "Int32.mod.unchecked" = SOME (Int_mod_unchecked I32)
  | fromString "Int54.mod.unchecked" = SOME (Int_mod_unchecked I54)
  | fromString "Int64.mod.unchecked" = SOME (Int_mod_unchecked I64)
  | fromString "Int.quot" = SOME (Int_quot INT)
  | fromString "Int32.quot" = SOME (Int_quot I32)
  | fromString "Int54.quot" = SOME (Int_quot I54)
  | fromString "Int64.quot" = SOME (Int_quot I64)
  | fromString "Int.rem" = SOME (Int_rem INT)
  | fromString "Int32.rem" = SOME (Int_rem I32)
  | fromString "Int54.rem" = SOME (Int_rem I54)
  | fromString "Int64.rem" = SOME (Int_rem I64)
  | fromString "Int.quot.unchecked" = SOME (Int_quot_unchecked INT)
  | fromString "Int32.quot.unchecked" = SOME (Int_quot_unchecked I32)
  | fromString "Int54.quot.unchecked" = SOME (Int_quot_unchecked I54)
  | fromString "Int64.quot.unchecked" = SOME (Int_quot_unchecked I64)
  | fromString "Int.rem.unchecked" = SOME (Int_rem_unchecked INT)
  | fromString "Int32.rem.unchecked" = SOME (Int_rem_unchecked I32)
  | fromString "Int54.rem.unchecked" = SOME (Int_rem_unchecked I54)
  | fromString "Int64.rem.unchecked" = SOME (Int_rem_unchecked I64)
  | fromString "Int.~" = SOME (Int_TILDE INT)
  | fromString "Int32.~" = SOME (Int_TILDE I32)
  | fromString "Int54.~" = SOME (Int_TILDE I54)
  | fromString "Int64.~" = SOME (Int_TILDE I64)
  | fromString "Int.~.unchecked" = SOME (Int_TILDE_unchecked INT)
  | fromString "Int32.~.unchecked" = SOME (Int_TILDE_unchecked I32)
  | fromString "Int54.~.unchecked" = SOME (Int_TILDE_unchecked I54)
  | fromString "Int64.~.unchecked" = SOME (Int_TILDE_unchecked I64)
  | fromString "Int.abs" = SOME (Int_abs INT)
  | fromString "Int32.abs" = SOME (Int_abs I32)
  | fromString "Int54.abs" = SOME (Int_abs I54)
  | fromString "Int64.abs" = SOME (Int_abs I64)
  | fromString "Int.<" = SOME (Int_LT INT)
  | fromString "Int32.<" = SOME (Int_LT I32)
  | fromString "Int54.<" = SOME (Int_LT I54)
  | fromString "Int64.<" = SOME (Int_LT I64)
  | fromString "Int.<=" = SOME (Int_LE INT)
  | fromString "Int32.<=" = SOME (Int_LE I32)
  | fromString "Int54.<=" = SOME (Int_LE I54)
  | fromString "Int64.<=" = SOME (Int_LE I64)
  | fromString "Int.>" = SOME (Int_GT INT)
  | fromString "Int32.>" = SOME (Int_GT I32)
  | fromString "Int54.>" = SOME (Int_GT I54)
  | fromString "Int64.>" = SOME (Int_GT I64)
  | fromString "Int.>=" = SOME (Int_GE INT)
  | fromString "Int32.>=" = SOME (Int_GE I32)
  | fromString "Int54.>=" = SOME (Int_GE I54)
  | fromString "Int64.>=" = SOME (Int_GE I64)
  | fromString "Word.=" = SOME (Word_EQUAL WORD)
  | fromString "Word32.=" = SOME (Word_EQUAL W32)
  | fromString "Word64.=" = SOME (Word_EQUAL W64)
  | fromString "Word.+" = SOME (Word_PLUS WORD)
  | fromString "Word32.+" = SOME (Word_PLUS W32)
  | fromString "Word64.+" = SOME (Word_PLUS W64)
  | fromString "Word.-" = SOME (Word_MINUS WORD)
  | fromString "Word32.-" = SOME (Word_MINUS W32)
  | fromString "Word64.-" = SOME (Word_MINUS W64)
  | fromString "Word.*" = SOME (Word_TIMES WORD)
  | fromString "Word32.*" = SOME (Word_TIMES W32)
  | fromString "Word64.*" = SOME (Word_TIMES W64)
  | fromString "Word.~" = SOME (Word_TILDE WORD)
  | fromString "Word32.~" = SOME (Word_TILDE W32)
  | fromString "Word64.~" = SOME (Word_TILDE W64)
  | fromString "Word.div" = SOME (Word_div WORD)
  | fromString "Word32.div" = SOME (Word_div W32)
  | fromString "Word64.div" = SOME (Word_div W64)
  | fromString "Word.mod" = SOME (Word_mod WORD)
  | fromString "Word32.mod" = SOME (Word_mod W32)
  | fromString "Word64.mod" = SOME (Word_mod W64)
  | fromString "Word.div.unchecked" = SOME (Word_div_unchecked WORD)
  | fromString "Word32.div.unchecked" = SOME (Word_div_unchecked W32)
  | fromString "Word64.div.unchecked" = SOME (Word_div_unchecked W64)
  | fromString "Word.mod.unchecked" = SOME (Word_mod_unchecked WORD)
  | fromString "Word32.mod.unchecked" = SOME (Word_mod_unchecked W32)
  | fromString "Word64.mod.unchecked" = SOME (Word_mod_unchecked W64)
  | fromString "Word.<" = SOME (Word_LT WORD)
  | fromString "Word32.<" = SOME (Word_LT W32)
  | fromString "Word64.<" = SOME (Word_LT W64)
  | fromString "Word.<=" = SOME (Word_LE WORD)
  | fromString "Word32.<=" = SOME (Word_LE W32)
  | fromString "Word64.<=" = SOME (Word_LE W64)
  | fromString "Word.>" = SOME (Word_GT WORD)
  | fromString "Word32.>" = SOME (Word_GT W32)
  | fromString "Word64.>" = SOME (Word_GT W64)
  | fromString "Word.>=" = SOME (Word_GE WORD)
  | fromString "Word32.>=" = SOME (Word_GE W32)
  | fromString "Word64.>=" = SOME (Word_GE W64)
  | fromString "Word.notb" = SOME (Word_notb WORD)
  | fromString "Word32.notb" = SOME (Word_notb W32)
  | fromString "Word64.notb" = SOME (Word_notb W64)
  | fromString "Word.andb" = SOME (Word_andb WORD)
  | fromString "Word32.andb" = SOME (Word_andb W32)
  | fromString "Word64.andb" = SOME (Word_andb W64)
  | fromString "Word.orb" = SOME (Word_orb WORD)
  | fromString "Word32.orb" = SOME (Word_orb W32)
  | fromString "Word64.orb" = SOME (Word_orb W64)
  | fromString "Word.xorb" = SOME (Word_xorb WORD)
  | fromString "Word32.xorb" = SOME (Word_xorb W32)
  | fromString "Word64.xorb" = SOME (Word_xorb W64)
  | fromString "Word.<<.unchecked" = SOME (Word_LSHIFT_unchecked (WORD, WORD))
  | fromString "Word.<<.unchecked.w32" = SOME (Word_LSHIFT_unchecked (WORD, W32))
  | fromString "Word.<<.unchecked.w64" = SOME (Word_LSHIFT_unchecked (WORD, W64))
  | fromString "Word32.<<.unchecked" = SOME (Word_LSHIFT_unchecked (W32, WORD))
  | fromString "Word32.<<.unchecked.w32" = SOME (Word_LSHIFT_unchecked (W32, W32))
  | fromString "Word32.<<.unchecked.w64" = SOME (Word_LSHIFT_unchecked (W32, W64))
  | fromString "Word64.<<.unchecked" = SOME (Word_LSHIFT_unchecked (W64, WORD))
  | fromString "Word64.<<.unchecked.w32" = SOME (Word_LSHIFT_unchecked (W64, W32))
  | fromString "Word64.<<.unchecked.w64" = SOME (Word_LSHIFT_unchecked (W64, W64))
  | fromString "Word.>>.unchecked" = SOME (Word_RSHIFT_unchecked (WORD, WORD))
  | fromString "Word.>>.unchecked.w32" = SOME (Word_RSHIFT_unchecked (WORD, W32))
  | fromString "Word.>>.unchecked.w64" = SOME (Word_RSHIFT_unchecked (WORD, W64))
  | fromString "Word32.>>.unchecked" = SOME (Word_RSHIFT_unchecked (W32, WORD))
  | fromString "Word32.>>.unchecked.w32" = SOME (Word_RSHIFT_unchecked (W32, W32))
  | fromString "Word32.>>.unchecked.w64" = SOME (Word_RSHIFT_unchecked (W32, W64))
  | fromString "Word64.>>.unchecked" = SOME (Word_RSHIFT_unchecked (W64, WORD))
  | fromString "Word64.>>.unchecked.w32" = SOME (Word_RSHIFT_unchecked (W64, W32))
  | fromString "Word64.>>.unchecked.w64" = SOME (Word_RSHIFT_unchecked (W64, W64))
  | fromString "Real.+" = SOME Real_PLUS
  | fromString "Real.-" = SOME Real_MINUS
  | fromString "Real.*" = SOME Real_TIMES
  | fromString "Real./" = SOME Real_DIVIDE
  | fromString "Real.~" = SOME Real_TILDE
  | fromString "Real.<" = SOME Real_LT
  | fromString "Real.<=" = SOME Real_LE
  | fromString "Real.>" = SOME Real_GT
  | fromString "Real.>=" = SOME Real_GE
  | fromString "Char.=" = SOME Char_EQUAL
  | fromString "Char.<" = SOME Char_LT
  | fromString "Char.<=" = SOME Char_LE
  | fromString "Char.>" = SOME Char_GT
  | fromString "Char.>=" = SOME Char_GE
  | fromString "Char16.=" = SOME Char16_EQUAL
  | fromString "Char16.<" = SOME Char16_LT
  | fromString "Char16.<=" = SOME Char16_LE
  | fromString "Char16.>" = SOME Char16_GT
  | fromString "Char16.>=" = SOME Char16_GE
  | fromString "String.=" = SOME String_EQUAL
  | fromString "String.<" = SOME String_LT
  | fromString "String.<=" = SOME String_LE
  | fromString "String.>" = SOME String_GT
  | fromString "String.>=" = SOME String_GE
  | fromString "String.^" = SOME String_HAT
  | fromString "String.size" = SOME (String_size INT)
  | fromString "String.size.i32" = SOME (String_size I32)
  | fromString "String.size.i54" = SOME (String_size I54)
  | fromString "String.size.i64" = SOME (String_size I64)
  | fromString "String.str" = SOME String_str
  | fromString "String16.=" = SOME String16_EQUAL
  | fromString "String16.<" = SOME String16_LT
  | fromString "String16.<=" = SOME String16_LE
  | fromString "String16.>" = SOME String16_GT
  | fromString "String16.>=" = SOME String16_GE
  | fromString "String16.^" = SOME String16_HAT
  | fromString "String16.size" = SOME (String16_size INT)
  | fromString "String16.size.i32" = SOME (String16_size I32)
  | fromString "String16.size.i54" = SOME (String16_size I54)
  | fromString "String16.size.i64" = SOME (String16_size I64)
  | fromString "String16.str" = SOME String16_str
  | fromString "IntInf.=" = SOME IntInf_EQUAL
  | fromString "IntInf.+" = SOME IntInf_PLUS
  | fromString "IntInf.-" = SOME IntInf_MINUS
  | fromString "IntInf.*" = SOME IntInf_TIMES
  | fromString "IntInf.~" = SOME IntInf_TILDE
  | fromString "IntInf.<" = SOME IntInf_LT
  | fromString "IntInf.<=" = SOME IntInf_LE
  | fromString "IntInf.>" = SOME IntInf_GT
  | fromString "IntInf.>=" = SOME IntInf_GE
  | fromString "IntInf.andb" = SOME IntInf_andb
  | fromString "IntInf.orb" = SOME IntInf_orb
  | fromString "IntInf.xorb" = SOME IntInf_xorb
  | fromString "IntInf.notb" = SOME IntInf_notb
  | fromString "IntInf.quot.unchecked" = SOME IntInf_quot_unchecked
  | fromString "IntInf.rem.unchecked" = SOME IntInf_rem_unchecked
  | fromString "Vector.length" = SOME (Vector_length INT)
  | fromString "Vector.length.i32" = SOME (Vector_length I32)
  | fromString "Vector.length.i54" = SOME (Vector_length I54)
  | fromString "Vector.length.i64" = SOME (Vector_length I64)
  | fromString "Vector.unsafeFromListRevN" = SOME (Vector_unsafeFromListRevN INT)
  | fromString "Vector.unsafeFromListRevN.i32" = SOME (Vector_unsafeFromListRevN I32)
  | fromString "Vector.unsafeFromListRevN.i54" = SOME (Vector_unsafeFromListRevN I54)
  | fromString "Vector.unsafeFromListRevN.i64" = SOME (Vector_unsafeFromListRevN I64)
  | fromString "Array.=" = SOME Array_EQUAL
  | fromString "Array.length" = SOME (Array_length INT)
  | fromString "Array.length.i32" = SOME (Array_length I32)
  | fromString "Array.length.i54" = SOME (Array_length I54)
  | fromString "Array.length.i64" = SOME (Array_length I64)
  | fromString "Unsafe.cast" = SOME Unsafe_cast
  | fromString "Unsafe.Vector.sub" = SOME (Unsafe_Vector_sub INT)
  | fromString "Unsafe.Vector.sub.i32" = SOME (Unsafe_Vector_sub I32)
  | fromString "Unsafe.Vector.sub.i54" = SOME (Unsafe_Vector_sub I54)
  | fromString "Unsafe.Vector.sub.i64" = SOME (Unsafe_Vector_sub I64)
  | fromString "Unsafe.Array.sub" = SOME (Unsafe_Array_sub INT)
  | fromString "Unsafe.Array.sub.i32" = SOME (Unsafe_Array_sub I32)
  | fromString "Unsafe.Array.sub.i54" = SOME (Unsafe_Array_sub I54)
  | fromString "Unsafe.Array.sub.i64" = SOME (Unsafe_Array_sub I64)
  | fromString "Unsafe.Array.update" = SOME (Unsafe_Array_update INT)
  | fromString "Unsafe.Array.update.i32" = SOME (Unsafe_Array_update I32)
  | fromString "Unsafe.Array.update.i54" = SOME (Unsafe_Array_update I54)
  | fromString "Unsafe.Array.update.i64" = SOME (Unsafe_Array_update I64)
  | fromString "Exception.instanceof" = SOME Exception_instanceof
  | fromString "DelimCont.newPromptTag" = SOME DelimCont_newPromptTag
  | fromString "DelimCont.pushPrompt" = SOME DelimCont_pushPrompt
  | fromString "DelimCont.withSubCont" = SOME DelimCont_withSubCont
  | fromString "DelimCont.pushSubCont" = SOME DelimCont_pushSubCont
  | fromString "assumeDiscardable" = SOME assumeDiscardable
  | fromString "Lua.sub" = SOME Lua_sub
  | fromString "Lua.set" = SOME Lua_set
  | fromString "Lua.isNil" = SOME Lua_isNil
  | fromString "Lua.==" = SOME Lua_EQUAL
  | fromString "Lua.~=" = SOME Lua_NOTEQUAL
  | fromString "Lua.<" = SOME Lua_LT
  | fromString "Lua.<=" = SOME Lua_LE
  | fromString "Lua.>" = SOME Lua_GT
  | fromString "Lua.>=" = SOME Lua_GE
  | fromString "Lua.+" = SOME Lua_PLUS
  | fromString "Lua.-" = SOME Lua_MINUS
  | fromString "Lua.*" = SOME Lua_TIMES
  | fromString "Lua./" = SOME Lua_DIVIDE
  | fromString "Lua.//" = SOME Lua_INTDIV
  | fromString "Lua.%" = SOME Lua_MOD
  | fromString "Lua.pow" = SOME Lua_pow
  | fromString "Lua.unm" = SOME Lua_unm
  | fromString "Lua.andb" = SOME Lua_andb
  | fromString "Lua.orb" = SOME Lua_orb
  | fromString "Lua.xorb" = SOME Lua_xorb
  | fromString "Lua.notb" = SOME Lua_notb
  | fromString "Lua.<<" = SOME Lua_LSHIFT
  | fromString "Lua.>>" = SOME Lua_RSHIFT
  | fromString "Lua.concat" = SOME Lua_concat
  | fromString "Lua.length" = SOME Lua_length
  | fromString "Lua.isFalsy" = SOME Lua_isFalsy
  | fromString "Lua.call" = SOME Lua_call
  | fromString "Lua.call1" = SOME Lua_call1
  | fromString "Lua.call2" = SOME Lua_call2
  | fromString "Lua.call3" = SOME Lua_call3
  | fromString "Lua.method" = SOME Lua_method
  | fromString "Lua.global" = SOME Lua_global
  | fromString "Lua.setGlobal" = SOME Lua_setGlobal
  | fromString "Lua.newTable" = SOME Lua_newTable
  | fromString "JavaScript.sub" = SOME JavaScript_sub
  | fromString "JavaScript.set" = SOME JavaScript_set
  | fromString "JavaScript.===" = SOME JavaScript_EQUAL
  | fromString "JavaScript.!==" = SOME JavaScript_NOTEQUAL
  | fromString "JavaScript.<" = SOME JavaScript_LT
  | fromString "JavaScript.<=" = SOME JavaScript_LE
  | fromString "JavaScript.>" = SOME JavaScript_GT
  | fromString "JavaScript.>=" = SOME JavaScript_GE
  | fromString "JavaScript.+" = SOME JavaScript_PLUS
  | fromString "JavaScript.-" = SOME JavaScript_MINUS
  | fromString "JavaScript.*" = SOME JavaScript_TIMES
  | fromString "JavaScript./" = SOME JavaScript_DIVIDE
  | fromString "JavaScript.%" = SOME JavaScript_MOD
  | fromString "JavaScript.negate" = SOME JavaScript_negate
  | fromString "JavaScript.andb" = SOME JavaScript_andb
  | fromString "JavaScript.orb" = SOME JavaScript_orb
  | fromString "JavaScript.xorb" = SOME JavaScript_xorb
  | fromString "JavaScript.notb" = SOME JavaScript_notb
  | fromString "JavaScript.<<" = SOME JavaScript_LSHIFT
  | fromString "JavaScript.>>" = SOME JavaScript_RSHIFT
  | fromString "JavaScript.>>>" = SOME JavaScript_URSHIFT
  | fromString "JavaScript.**" = SOME JavaScript_EXP
  | fromString "JavaScript.isFalsy" = SOME JavaScript_isFalsy
  | fromString "JavaScript.typeof" = SOME JavaScript_typeof
  | fromString "JavaScript.global" = SOME JavaScript_global
  | fromString "JavaScript.setGlobal" = SOME JavaScript_setGlobal
  | fromString "JavaScript.call" = SOME JavaScript_call
  | fromString "JavaScript.method" = SOME JavaScript_method
  | fromString "JavaScript.new" = SOME JavaScript_new
  | fromString _ = NONE
fun mayRaise EQUAL = false
  | mayRaise call2 = true
  | mayRaise call3 = true
  | mayRaise List_cons = false
  | mayRaise List_null = false
  | mayRaise List_unsafeHead = false
  | mayRaise List_unsafeTail = false
  | mayRaise Ref_ref = false
  | mayRaise Ref_EQUAL = false
  | mayRaise Ref_set = false
  | mayRaise Ref_read = false
  | mayRaise Bool_EQUAL = false
  | mayRaise Bool_not = false
  | mayRaise (Int_EQUAL _) = false
  | mayRaise (Int_PLUS _) = true
  | mayRaise (Int_MINUS _) = true
  | mayRaise (Int_TIMES _) = true
  | mayRaise (Int_div _) = true
  | mayRaise (Int_mod _) = true
  | mayRaise (Int_div_unchecked _) = false
  | mayRaise (Int_mod_unchecked _) = false
  | mayRaise (Int_quot _) = true
  | mayRaise (Int_rem _) = true
  | mayRaise (Int_quot_unchecked _) = false
  | mayRaise (Int_rem_unchecked _) = false
  | mayRaise (Int_TILDE _) = true
  | mayRaise (Int_TILDE_unchecked _) = false
  | mayRaise (Int_abs _) = true
  | mayRaise (Int_LT _) = false
  | mayRaise (Int_LE _) = false
  | mayRaise (Int_GT _) = false
  | mayRaise (Int_GE _) = false
  | mayRaise (Word_EQUAL _) = false
  | mayRaise (Word_PLUS _) = false
  | mayRaise (Word_MINUS _) = false
  | mayRaise (Word_TIMES _) = false
  | mayRaise (Word_TILDE _) = false
  | mayRaise (Word_div _) = true
  | mayRaise (Word_mod _) = true
  | mayRaise (Word_div_unchecked _) = false
  | mayRaise (Word_mod_unchecked _) = false
  | mayRaise (Word_LT _) = false
  | mayRaise (Word_LE _) = false
  | mayRaise (Word_GT _) = false
  | mayRaise (Word_GE _) = false
  | mayRaise (Word_notb _) = false
  | mayRaise (Word_andb _) = false
  | mayRaise (Word_orb _) = false
  | mayRaise (Word_xorb _) = false
  | mayRaise (Word_LSHIFT_unchecked _) = false
  | mayRaise (Word_RSHIFT_unchecked _) = false
  | mayRaise Real_PLUS = false
  | mayRaise Real_MINUS = false
  | mayRaise Real_TIMES = false
  | mayRaise Real_DIVIDE = false
  | mayRaise Real_TILDE = false
  | mayRaise Real_LT = false
  | mayRaise Real_LE = false
  | mayRaise Real_GT = false
  | mayRaise Real_GE = false
  | mayRaise Char_EQUAL = false
  | mayRaise Char_LT = false
  | mayRaise Char_LE = false
  | mayRaise Char_GT = false
  | mayRaise Char_GE = false
  | mayRaise Char16_EQUAL = false
  | mayRaise Char16_LT = false
  | mayRaise Char16_LE = false
  | mayRaise Char16_GT = false
  | mayRaise Char16_GE = false
  | mayRaise String_EQUAL = false
  | mayRaise String_LT = false
  | mayRaise String_LE = false
  | mayRaise String_GT = false
  | mayRaise String_GE = false
  | mayRaise String_HAT = true
  | mayRaise (String_size _) = false
  | mayRaise String_str = false
  | mayRaise String16_EQUAL = false
  | mayRaise String16_LT = false
  | mayRaise String16_LE = false
  | mayRaise String16_GT = false
  | mayRaise String16_GE = false
  | mayRaise String16_HAT = true
  | mayRaise (String16_size _) = false
  | mayRaise String16_str = false
  | mayRaise IntInf_EQUAL = false
  | mayRaise IntInf_PLUS = false
  | mayRaise IntInf_MINUS = false
  | mayRaise IntInf_TIMES = false
  | mayRaise IntInf_TILDE = false
  | mayRaise IntInf_LT = false
  | mayRaise IntInf_LE = false
  | mayRaise IntInf_GT = false
  | mayRaise IntInf_GE = false
  | mayRaise IntInf_andb = false
  | mayRaise IntInf_orb = false
  | mayRaise IntInf_xorb = false
  | mayRaise IntInf_notb = false
  | mayRaise IntInf_quot_unchecked = false
  | mayRaise IntInf_rem_unchecked = false
  | mayRaise (Vector_length _) = false
  | mayRaise (Vector_unsafeFromListRevN _) = false
  | mayRaise Array_EQUAL = false
  | mayRaise (Array_length _) = false
  | mayRaise Unsafe_cast = false
  | mayRaise (Unsafe_Vector_sub _) = false
  | mayRaise (Unsafe_Array_sub _) = false
  | mayRaise (Unsafe_Array_update _) = false
  | mayRaise Exception_instanceof = false
  | mayRaise DelimCont_newPromptTag = false
  | mayRaise DelimCont_pushPrompt = true
  | mayRaise DelimCont_withSubCont = true
  | mayRaise DelimCont_pushSubCont = true
  | mayRaise assumeDiscardable = true
  | mayRaise Lua_sub = true
  | mayRaise Lua_set = true
  | mayRaise Lua_isNil = false
  | mayRaise Lua_EQUAL = true
  | mayRaise Lua_NOTEQUAL = true
  | mayRaise Lua_LT = true
  | mayRaise Lua_LE = true
  | mayRaise Lua_GT = true
  | mayRaise Lua_GE = true
  | mayRaise Lua_PLUS = true
  | mayRaise Lua_MINUS = true
  | mayRaise Lua_TIMES = true
  | mayRaise Lua_DIVIDE = true
  | mayRaise Lua_INTDIV = true
  | mayRaise Lua_MOD = true
  | mayRaise Lua_pow = true
  | mayRaise Lua_unm = true
  | mayRaise Lua_andb = true
  | mayRaise Lua_orb = true
  | mayRaise Lua_xorb = true
  | mayRaise Lua_notb = true
  | mayRaise Lua_LSHIFT = true
  | mayRaise Lua_RSHIFT = true
  | mayRaise Lua_concat = true
  | mayRaise Lua_length = true
  | mayRaise Lua_isFalsy = false
  | mayRaise Lua_call = true
  | mayRaise Lua_call1 = true
  | mayRaise Lua_call2 = true
  | mayRaise Lua_call3 = true
  | mayRaise Lua_method = true
  | mayRaise Lua_global = false
  | mayRaise Lua_setGlobal = false
  | mayRaise Lua_newTable = false
  | mayRaise JavaScript_sub = true
  | mayRaise JavaScript_set = true
  | mayRaise JavaScript_EQUAL = false
  | mayRaise JavaScript_NOTEQUAL = false
  | mayRaise JavaScript_LT = true
  | mayRaise JavaScript_LE = true
  | mayRaise JavaScript_GT = true
  | mayRaise JavaScript_GE = true
  | mayRaise JavaScript_PLUS = true
  | mayRaise JavaScript_MINUS = true
  | mayRaise JavaScript_TIMES = true
  | mayRaise JavaScript_DIVIDE = true
  | mayRaise JavaScript_MOD = true
  | mayRaise JavaScript_negate = true
  | mayRaise JavaScript_andb = true
  | mayRaise JavaScript_orb = true
  | mayRaise JavaScript_xorb = true
  | mayRaise JavaScript_notb = true
  | mayRaise JavaScript_LSHIFT = true
  | mayRaise JavaScript_RSHIFT = true
  | mayRaise JavaScript_URSHIFT = true
  | mayRaise JavaScript_EXP = true
  | mayRaise JavaScript_isFalsy = false
  | mayRaise JavaScript_typeof = false
  | mayRaise JavaScript_global = true
  | mayRaise JavaScript_setGlobal = true
  | mayRaise JavaScript_call = true
  | mayRaise JavaScript_method = true
  | mayRaise JavaScript_new = true
fun isDiscardable EQUAL = true
  | isDiscardable call2 = false
  | isDiscardable call3 = false
  | isDiscardable List_cons = true
  | isDiscardable List_null = true
  | isDiscardable List_unsafeHead = true
  | isDiscardable List_unsafeTail = true
  | isDiscardable Ref_ref = true
  | isDiscardable Ref_EQUAL = true
  | isDiscardable Ref_set = false
  | isDiscardable Ref_read = true
  | isDiscardable Bool_EQUAL = true
  | isDiscardable Bool_not = true
  | isDiscardable (Int_EQUAL _) = true
  | isDiscardable (Int_PLUS _) = false
  | isDiscardable (Int_MINUS _) = false
  | isDiscardable (Int_TIMES _) = false
  | isDiscardable (Int_div _) = false
  | isDiscardable (Int_mod _) = false
  | isDiscardable (Int_div_unchecked _) = true
  | isDiscardable (Int_mod_unchecked _) = true
  | isDiscardable (Int_quot _) = false
  | isDiscardable (Int_rem _) = false
  | isDiscardable (Int_quot_unchecked _) = true
  | isDiscardable (Int_rem_unchecked _) = true
  | isDiscardable (Int_TILDE _) = false
  | isDiscardable (Int_TILDE_unchecked _) = true
  | isDiscardable (Int_abs _) = false
  | isDiscardable (Int_LT _) = true
  | isDiscardable (Int_LE _) = true
  | isDiscardable (Int_GT _) = true
  | isDiscardable (Int_GE _) = true
  | isDiscardable (Word_EQUAL _) = true
  | isDiscardable (Word_PLUS _) = true
  | isDiscardable (Word_MINUS _) = true
  | isDiscardable (Word_TIMES _) = true
  | isDiscardable (Word_TILDE _) = true
  | isDiscardable (Word_div _) = false
  | isDiscardable (Word_mod _) = false
  | isDiscardable (Word_div_unchecked _) = true
  | isDiscardable (Word_mod_unchecked _) = true
  | isDiscardable (Word_LT _) = true
  | isDiscardable (Word_LE _) = true
  | isDiscardable (Word_GT _) = true
  | isDiscardable (Word_GE _) = true
  | isDiscardable (Word_notb _) = true
  | isDiscardable (Word_andb _) = true
  | isDiscardable (Word_orb _) = true
  | isDiscardable (Word_xorb _) = true
  | isDiscardable (Word_LSHIFT_unchecked _) = true
  | isDiscardable (Word_RSHIFT_unchecked _) = true
  | isDiscardable Real_PLUS = true
  | isDiscardable Real_MINUS = true
  | isDiscardable Real_TIMES = true
  | isDiscardable Real_DIVIDE = true
  | isDiscardable Real_TILDE = true
  | isDiscardable Real_LT = true
  | isDiscardable Real_LE = true
  | isDiscardable Real_GT = true
  | isDiscardable Real_GE = true
  | isDiscardable Char_EQUAL = true
  | isDiscardable Char_LT = true
  | isDiscardable Char_LE = true
  | isDiscardable Char_GT = true
  | isDiscardable Char_GE = true
  | isDiscardable Char16_EQUAL = true
  | isDiscardable Char16_LT = true
  | isDiscardable Char16_LE = true
  | isDiscardable Char16_GT = true
  | isDiscardable Char16_GE = true
  | isDiscardable String_EQUAL = true
  | isDiscardable String_LT = true
  | isDiscardable String_LE = true
  | isDiscardable String_GT = true
  | isDiscardable String_GE = true
  | isDiscardable String_HAT = false
  | isDiscardable (String_size _) = true
  | isDiscardable String_str = true
  | isDiscardable String16_EQUAL = true
  | isDiscardable String16_LT = true
  | isDiscardable String16_LE = true
  | isDiscardable String16_GT = true
  | isDiscardable String16_GE = true
  | isDiscardable String16_HAT = false
  | isDiscardable (String16_size _) = true
  | isDiscardable String16_str = true
  | isDiscardable IntInf_EQUAL = true
  | isDiscardable IntInf_PLUS = true
  | isDiscardable IntInf_MINUS = true
  | isDiscardable IntInf_TIMES = true
  | isDiscardable IntInf_TILDE = true
  | isDiscardable IntInf_LT = true
  | isDiscardable IntInf_LE = true
  | isDiscardable IntInf_GT = true
  | isDiscardable IntInf_GE = true
  | isDiscardable IntInf_andb = true
  | isDiscardable IntInf_orb = true
  | isDiscardable IntInf_xorb = true
  | isDiscardable IntInf_notb = true
  | isDiscardable IntInf_quot_unchecked = true
  | isDiscardable IntInf_rem_unchecked = true
  | isDiscardable (Vector_length _) = true
  | isDiscardable (Vector_unsafeFromListRevN _) = true
  | isDiscardable Array_EQUAL = true
  | isDiscardable (Array_length _) = true
  | isDiscardable Unsafe_cast = true
  | isDiscardable (Unsafe_Vector_sub _) = true
  | isDiscardable (Unsafe_Array_sub _) = true
  | isDiscardable (Unsafe_Array_update _) = false
  | isDiscardable Exception_instanceof = true
  | isDiscardable DelimCont_newPromptTag = true
  | isDiscardable DelimCont_pushPrompt = false
  | isDiscardable DelimCont_withSubCont = false
  | isDiscardable DelimCont_pushSubCont = false
  | isDiscardable assumeDiscardable = true
  | isDiscardable Lua_sub = false
  | isDiscardable Lua_set = false
  | isDiscardable Lua_isNil = true
  | isDiscardable Lua_EQUAL = false
  | isDiscardable Lua_NOTEQUAL = false
  | isDiscardable Lua_LT = false
  | isDiscardable Lua_LE = false
  | isDiscardable Lua_GT = false
  | isDiscardable Lua_GE = false
  | isDiscardable Lua_PLUS = false
  | isDiscardable Lua_MINUS = false
  | isDiscardable Lua_TIMES = false
  | isDiscardable Lua_DIVIDE = false
  | isDiscardable Lua_INTDIV = false
  | isDiscardable Lua_MOD = false
  | isDiscardable Lua_pow = false
  | isDiscardable Lua_unm = false
  | isDiscardable Lua_andb = false
  | isDiscardable Lua_orb = false
  | isDiscardable Lua_xorb = false
  | isDiscardable Lua_notb = false
  | isDiscardable Lua_LSHIFT = false
  | isDiscardable Lua_RSHIFT = false
  | isDiscardable Lua_concat = false
  | isDiscardable Lua_length = false
  | isDiscardable Lua_isFalsy = true
  | isDiscardable Lua_call = false
  | isDiscardable Lua_call1 = false
  | isDiscardable Lua_call2 = false
  | isDiscardable Lua_call3 = false
  | isDiscardable Lua_method = false
  | isDiscardable Lua_global = true
  | isDiscardable Lua_setGlobal = false
  | isDiscardable Lua_newTable = true
  | isDiscardable JavaScript_sub = false
  | isDiscardable JavaScript_set = false
  | isDiscardable JavaScript_EQUAL = true
  | isDiscardable JavaScript_NOTEQUAL = true
  | isDiscardable JavaScript_LT = false
  | isDiscardable JavaScript_LE = false
  | isDiscardable JavaScript_GT = false
  | isDiscardable JavaScript_GE = false
  | isDiscardable JavaScript_PLUS = false
  | isDiscardable JavaScript_MINUS = false
  | isDiscardable JavaScript_TIMES = false
  | isDiscardable JavaScript_DIVIDE = false
  | isDiscardable JavaScript_MOD = false
  | isDiscardable JavaScript_negate = false
  | isDiscardable JavaScript_andb = false
  | isDiscardable JavaScript_orb = false
  | isDiscardable JavaScript_xorb = false
  | isDiscardable JavaScript_notb = false
  | isDiscardable JavaScript_LSHIFT = false
  | isDiscardable JavaScript_RSHIFT = false
  | isDiscardable JavaScript_URSHIFT = false
  | isDiscardable JavaScript_EXP = false
  | isDiscardable JavaScript_isFalsy = true
  | isDiscardable JavaScript_typeof = true
  | isDiscardable JavaScript_global = false
  | isDiscardable JavaScript_setGlobal = false
  | isDiscardable JavaScript_call = false
  | isDiscardable JavaScript_method = false
  | isDiscardable JavaScript_new = false
fun fixIntWord { int, word }
  = let fun fixInt INT = int
          | fixInt i = i
        fun fixWord WORD = word
          | fixWord w = w
    in fn Int_EQUAL a1 => Int_EQUAL (fixInt a1)
        | Int_PLUS a1 => Int_PLUS (fixInt a1)
        | Int_MINUS a1 => Int_MINUS (fixInt a1)
        | Int_TIMES a1 => Int_TIMES (fixInt a1)
        | Int_div a1 => Int_div (fixInt a1)
        | Int_mod a1 => Int_mod (fixInt a1)
        | Int_div_unchecked a1 => Int_div_unchecked (fixInt a1)
        | Int_mod_unchecked a1 => Int_mod_unchecked (fixInt a1)
        | Int_quot a1 => Int_quot (fixInt a1)
        | Int_rem a1 => Int_rem (fixInt a1)
        | Int_quot_unchecked a1 => Int_quot_unchecked (fixInt a1)
        | Int_rem_unchecked a1 => Int_rem_unchecked (fixInt a1)
        | Int_TILDE a1 => Int_TILDE (fixInt a1)
        | Int_TILDE_unchecked a1 => Int_TILDE_unchecked (fixInt a1)
        | Int_abs a1 => Int_abs (fixInt a1)
        | Int_LT a1 => Int_LT (fixInt a1)
        | Int_LE a1 => Int_LE (fixInt a1)
        | Int_GT a1 => Int_GT (fixInt a1)
        | Int_GE a1 => Int_GE (fixInt a1)
        | Word_EQUAL a1 => Word_EQUAL (fixWord a1)
        | Word_PLUS a1 => Word_PLUS (fixWord a1)
        | Word_MINUS a1 => Word_MINUS (fixWord a1)
        | Word_TIMES a1 => Word_TIMES (fixWord a1)
        | Word_TILDE a1 => Word_TILDE (fixWord a1)
        | Word_div a1 => Word_div (fixWord a1)
        | Word_mod a1 => Word_mod (fixWord a1)
        | Word_div_unchecked a1 => Word_div_unchecked (fixWord a1)
        | Word_mod_unchecked a1 => Word_mod_unchecked (fixWord a1)
        | Word_LT a1 => Word_LT (fixWord a1)
        | Word_LE a1 => Word_LE (fixWord a1)
        | Word_GT a1 => Word_GT (fixWord a1)
        | Word_GE a1 => Word_GE (fixWord a1)
        | Word_notb a1 => Word_notb (fixWord a1)
        | Word_andb a1 => Word_andb (fixWord a1)
        | Word_orb a1 => Word_orb (fixWord a1)
        | Word_xorb a1 => Word_xorb (fixWord a1)
        | Word_LSHIFT_unchecked (a1, a2) => Word_LSHIFT_unchecked (fixWord a1, fixWord a2)
        | Word_RSHIFT_unchecked (a1, a2) => Word_RSHIFT_unchecked (fixWord a1, fixWord a2)
        | String_size a1 => String_size (fixInt a1)
        | String16_size a1 => String16_size (fixInt a1)
        | Vector_length a1 => Vector_length (fixInt a1)
        | Vector_unsafeFromListRevN a1 => Vector_unsafeFromListRevN (fixInt a1)
        | Array_length a1 => Array_length (fixInt a1)
        | Unsafe_Vector_sub a1 => Unsafe_Vector_sub (fixInt a1)
        | Unsafe_Array_sub a1 => Unsafe_Array_sub (fixInt a1)
        | Unsafe_Array_update a1 => Unsafe_Array_update (fixInt a1)
        | p => p
    end
end;

functor TypeOfPrimitives (type ty
                          type tv
                          type constraint
                          val tyVarA : tv
                          val tyVarB : tv
                          val tyVarC : tv
                          val tyVarD : tv
                          val tyVarEqA : tv
                          val tyA : ty
                          val tyB : ty
                          val tyC : ty
                          val tyD : ty
                          val tyEqA : ty
                          val unit : ty
                          val bool : ty
                          val int : ty
                          val int32 : ty
                          val int54 : ty
                          val int64 : ty
                          val word : ty
                          val word32 : ty
                          val word64 : ty
                          val real : ty
                          val char : ty
                          val char16 : ty
                          val string : ty
                          val string16 : ty
                          val intInf : ty
                          val exn : ty
                          val exntag : ty
                          val LuaValue : ty
                          val JavaScriptValue : ty
                          val refOf : ty -> ty
                          val listOf : ty -> ty
                          val vectorOf : ty -> ty
                          val arrayOf : ty -> ty
                          val pairOf : ty * ty -> ty
                          val tupleOf : ty list -> ty
                          val function1Of : ty * ty -> ty
                          val function2Of : ty * ty * ty -> ty
                          val function3Of : ty * ty * ty * ty -> ty
                          val promptTagOf : ty -> ty
                          val subcontOf : ty * ty -> ty
                          val IsEqType : constraint
                         ) : sig
                               val typeOf : Primitives.PrimOp -> { vars : (tv * constraint list) list, args : ty vector, result : ty }
                             end = struct
fun typeOf Primitives.EQUAL = { vars = [(tyVarEqA, [IsEqType])], args = vector [tyEqA, tyEqA], result = bool }
  | typeOf Primitives.call2 = { vars = [(tyVarA, []), (tyVarB, []), (tyVarC, [])], args = vector [function2Of (tyA, tyB, tyC), tyB, tyC], result = tyA }
  | typeOf Primitives.call3 = { vars = [(tyVarA, []), (tyVarB, []), (tyVarC, []), (tyVarD, [])], args = vector [function3Of (tyA, tyB, tyC, tyD), tyB, tyC, tyD], result = tyA }
  | typeOf Primitives.List_cons = { vars = [(tyVarA, [])], args = vector [tyA, listOf (tyA)], result = listOf (tyA) }
  | typeOf Primitives.List_null = { vars = [(tyVarA, [])], args = vector [listOf (tyA)], result = bool }
  | typeOf Primitives.List_unsafeHead = { vars = [(tyVarA, [])], args = vector [listOf (tyA)], result = tyA }
  | typeOf Primitives.List_unsafeTail = { vars = [(tyVarA, [])], args = vector [listOf (tyA)], result = listOf (tyA) }
  | typeOf Primitives.Ref_ref = { vars = [(tyVarA, [])], args = vector [tyA], result = refOf (tyA) }
  | typeOf Primitives.Ref_EQUAL = { vars = [(tyVarA, [])], args = vector [refOf (tyA), refOf (tyA)], result = bool }
  | typeOf Primitives.Ref_set = { vars = [(tyVarA, [])], args = vector [refOf (tyA), tyA], result = unit }
  | typeOf Primitives.Ref_read = { vars = [(tyVarA, [])], args = vector [refOf (tyA)], result = tyA }
  | typeOf Primitives.Bool_EQUAL = { vars = [], args = vector [bool, bool], result = bool }
  | typeOf Primitives.Bool_not = { vars = [], args = vector [bool], result = bool }
  | typeOf (Primitives.Int_EQUAL Primitives.INT) = { vars = [], args = vector [int, int], result = bool }
  | typeOf (Primitives.Int_EQUAL Primitives.I32) = { vars = [], args = vector [int32, int32], result = bool }
  | typeOf (Primitives.Int_EQUAL Primitives.I54) = { vars = [], args = vector [int54, int54], result = bool }
  | typeOf (Primitives.Int_EQUAL Primitives.I64) = { vars = [], args = vector [int64, int64], result = bool }
  | typeOf (Primitives.Int_PLUS Primitives.INT) = { vars = [], args = vector [int, int], result = int }
  | typeOf (Primitives.Int_PLUS Primitives.I32) = { vars = [], args = vector [int32, int32], result = int32 }
  | typeOf (Primitives.Int_PLUS Primitives.I54) = { vars = [], args = vector [int54, int54], result = int54 }
  | typeOf (Primitives.Int_PLUS Primitives.I64) = { vars = [], args = vector [int64, int64], result = int64 }
  | typeOf (Primitives.Int_MINUS Primitives.INT) = { vars = [], args = vector [int, int], result = int }
  | typeOf (Primitives.Int_MINUS Primitives.I32) = { vars = [], args = vector [int32, int32], result = int32 }
  | typeOf (Primitives.Int_MINUS Primitives.I54) = { vars = [], args = vector [int54, int54], result = int54 }
  | typeOf (Primitives.Int_MINUS Primitives.I64) = { vars = [], args = vector [int64, int64], result = int64 }
  | typeOf (Primitives.Int_TIMES Primitives.INT) = { vars = [], args = vector [int, int], result = int }
  | typeOf (Primitives.Int_TIMES Primitives.I32) = { vars = [], args = vector [int32, int32], result = int32 }
  | typeOf (Primitives.Int_TIMES Primitives.I54) = { vars = [], args = vector [int54, int54], result = int54 }
  | typeOf (Primitives.Int_TIMES Primitives.I64) = { vars = [], args = vector [int64, int64], result = int64 }
  | typeOf (Primitives.Int_div Primitives.INT) = { vars = [], args = vector [int, int], result = int }
  | typeOf (Primitives.Int_div Primitives.I32) = { vars = [], args = vector [int32, int32], result = int32 }
  | typeOf (Primitives.Int_div Primitives.I54) = { vars = [], args = vector [int54, int54], result = int54 }
  | typeOf (Primitives.Int_div Primitives.I64) = { vars = [], args = vector [int64, int64], result = int64 }
  | typeOf (Primitives.Int_mod Primitives.INT) = { vars = [], args = vector [int, int], result = int }
  | typeOf (Primitives.Int_mod Primitives.I32) = { vars = [], args = vector [int32, int32], result = int32 }
  | typeOf (Primitives.Int_mod Primitives.I54) = { vars = [], args = vector [int54, int54], result = int54 }
  | typeOf (Primitives.Int_mod Primitives.I64) = { vars = [], args = vector [int64, int64], result = int64 }
  | typeOf (Primitives.Int_div_unchecked Primitives.INT) = { vars = [], args = vector [int, int], result = int }
  | typeOf (Primitives.Int_div_unchecked Primitives.I32) = { vars = [], args = vector [int32, int32], result = int32 }
  | typeOf (Primitives.Int_div_unchecked Primitives.I54) = { vars = [], args = vector [int54, int54], result = int54 }
  | typeOf (Primitives.Int_div_unchecked Primitives.I64) = { vars = [], args = vector [int64, int64], result = int64 }
  | typeOf (Primitives.Int_mod_unchecked Primitives.INT) = { vars = [], args = vector [int, int], result = int }
  | typeOf (Primitives.Int_mod_unchecked Primitives.I32) = { vars = [], args = vector [int32, int32], result = int32 }
  | typeOf (Primitives.Int_mod_unchecked Primitives.I54) = { vars = [], args = vector [int54, int54], result = int54 }
  | typeOf (Primitives.Int_mod_unchecked Primitives.I64) = { vars = [], args = vector [int64, int64], result = int64 }
  | typeOf (Primitives.Int_quot Primitives.INT) = { vars = [], args = vector [int, int], result = int }
  | typeOf (Primitives.Int_quot Primitives.I32) = { vars = [], args = vector [int32, int32], result = int32 }
  | typeOf (Primitives.Int_quot Primitives.I54) = { vars = [], args = vector [int54, int54], result = int54 }
  | typeOf (Primitives.Int_quot Primitives.I64) = { vars = [], args = vector [int64, int64], result = int64 }
  | typeOf (Primitives.Int_rem Primitives.INT) = { vars = [], args = vector [int, int], result = int }
  | typeOf (Primitives.Int_rem Primitives.I32) = { vars = [], args = vector [int32, int32], result = int32 }
  | typeOf (Primitives.Int_rem Primitives.I54) = { vars = [], args = vector [int54, int54], result = int54 }
  | typeOf (Primitives.Int_rem Primitives.I64) = { vars = [], args = vector [int64, int64], result = int64 }
  | typeOf (Primitives.Int_quot_unchecked Primitives.INT) = { vars = [], args = vector [int, int], result = int }
  | typeOf (Primitives.Int_quot_unchecked Primitives.I32) = { vars = [], args = vector [int32, int32], result = int32 }
  | typeOf (Primitives.Int_quot_unchecked Primitives.I54) = { vars = [], args = vector [int54, int54], result = int54 }
  | typeOf (Primitives.Int_quot_unchecked Primitives.I64) = { vars = [], args = vector [int64, int64], result = int64 }
  | typeOf (Primitives.Int_rem_unchecked Primitives.INT) = { vars = [], args = vector [int, int], result = int }
  | typeOf (Primitives.Int_rem_unchecked Primitives.I32) = { vars = [], args = vector [int32, int32], result = int32 }
  | typeOf (Primitives.Int_rem_unchecked Primitives.I54) = { vars = [], args = vector [int54, int54], result = int54 }
  | typeOf (Primitives.Int_rem_unchecked Primitives.I64) = { vars = [], args = vector [int64, int64], result = int64 }
  | typeOf (Primitives.Int_TILDE Primitives.INT) = { vars = [], args = vector [int], result = int }
  | typeOf (Primitives.Int_TILDE Primitives.I32) = { vars = [], args = vector [int32], result = int32 }
  | typeOf (Primitives.Int_TILDE Primitives.I54) = { vars = [], args = vector [int54], result = int54 }
  | typeOf (Primitives.Int_TILDE Primitives.I64) = { vars = [], args = vector [int64], result = int64 }
  | typeOf (Primitives.Int_TILDE_unchecked Primitives.INT) = { vars = [], args = vector [int], result = int }
  | typeOf (Primitives.Int_TILDE_unchecked Primitives.I32) = { vars = [], args = vector [int32], result = int32 }
  | typeOf (Primitives.Int_TILDE_unchecked Primitives.I54) = { vars = [], args = vector [int54], result = int54 }
  | typeOf (Primitives.Int_TILDE_unchecked Primitives.I64) = { vars = [], args = vector [int64], result = int64 }
  | typeOf (Primitives.Int_abs Primitives.INT) = { vars = [], args = vector [int], result = int }
  | typeOf (Primitives.Int_abs Primitives.I32) = { vars = [], args = vector [int32], result = int32 }
  | typeOf (Primitives.Int_abs Primitives.I54) = { vars = [], args = vector [int54], result = int54 }
  | typeOf (Primitives.Int_abs Primitives.I64) = { vars = [], args = vector [int64], result = int64 }
  | typeOf (Primitives.Int_LT Primitives.INT) = { vars = [], args = vector [int, int], result = bool }
  | typeOf (Primitives.Int_LT Primitives.I32) = { vars = [], args = vector [int32, int32], result = bool }
  | typeOf (Primitives.Int_LT Primitives.I54) = { vars = [], args = vector [int54, int54], result = bool }
  | typeOf (Primitives.Int_LT Primitives.I64) = { vars = [], args = vector [int64, int64], result = bool }
  | typeOf (Primitives.Int_LE Primitives.INT) = { vars = [], args = vector [int, int], result = bool }
  | typeOf (Primitives.Int_LE Primitives.I32) = { vars = [], args = vector [int32, int32], result = bool }
  | typeOf (Primitives.Int_LE Primitives.I54) = { vars = [], args = vector [int54, int54], result = bool }
  | typeOf (Primitives.Int_LE Primitives.I64) = { vars = [], args = vector [int64, int64], result = bool }
  | typeOf (Primitives.Int_GT Primitives.INT) = { vars = [], args = vector [int, int], result = bool }
  | typeOf (Primitives.Int_GT Primitives.I32) = { vars = [], args = vector [int32, int32], result = bool }
  | typeOf (Primitives.Int_GT Primitives.I54) = { vars = [], args = vector [int54, int54], result = bool }
  | typeOf (Primitives.Int_GT Primitives.I64) = { vars = [], args = vector [int64, int64], result = bool }
  | typeOf (Primitives.Int_GE Primitives.INT) = { vars = [], args = vector [int, int], result = bool }
  | typeOf (Primitives.Int_GE Primitives.I32) = { vars = [], args = vector [int32, int32], result = bool }
  | typeOf (Primitives.Int_GE Primitives.I54) = { vars = [], args = vector [int54, int54], result = bool }
  | typeOf (Primitives.Int_GE Primitives.I64) = { vars = [], args = vector [int64, int64], result = bool }
  | typeOf (Primitives.Word_EQUAL Primitives.WORD) = { vars = [], args = vector [word, word], result = bool }
  | typeOf (Primitives.Word_EQUAL Primitives.W32) = { vars = [], args = vector [word32, word32], result = bool }
  | typeOf (Primitives.Word_EQUAL Primitives.W64) = { vars = [], args = vector [word64, word64], result = bool }
  | typeOf (Primitives.Word_PLUS Primitives.WORD) = { vars = [], args = vector [word, word], result = word }
  | typeOf (Primitives.Word_PLUS Primitives.W32) = { vars = [], args = vector [word32, word32], result = word32 }
  | typeOf (Primitives.Word_PLUS Primitives.W64) = { vars = [], args = vector [word64, word64], result = word64 }
  | typeOf (Primitives.Word_MINUS Primitives.WORD) = { vars = [], args = vector [word, word], result = word }
  | typeOf (Primitives.Word_MINUS Primitives.W32) = { vars = [], args = vector [word32, word32], result = word32 }
  | typeOf (Primitives.Word_MINUS Primitives.W64) = { vars = [], args = vector [word64, word64], result = word64 }
  | typeOf (Primitives.Word_TIMES Primitives.WORD) = { vars = [], args = vector [word, word], result = word }
  | typeOf (Primitives.Word_TIMES Primitives.W32) = { vars = [], args = vector [word32, word32], result = word32 }
  | typeOf (Primitives.Word_TIMES Primitives.W64) = { vars = [], args = vector [word64, word64], result = word64 }
  | typeOf (Primitives.Word_TILDE Primitives.WORD) = { vars = [], args = vector [word], result = word }
  | typeOf (Primitives.Word_TILDE Primitives.W32) = { vars = [], args = vector [word32], result = word32 }
  | typeOf (Primitives.Word_TILDE Primitives.W64) = { vars = [], args = vector [word64], result = word64 }
  | typeOf (Primitives.Word_div Primitives.WORD) = { vars = [], args = vector [word, word], result = word }
  | typeOf (Primitives.Word_div Primitives.W32) = { vars = [], args = vector [word32, word32], result = word32 }
  | typeOf (Primitives.Word_div Primitives.W64) = { vars = [], args = vector [word64, word64], result = word64 }
  | typeOf (Primitives.Word_mod Primitives.WORD) = { vars = [], args = vector [word, word], result = word }
  | typeOf (Primitives.Word_mod Primitives.W32) = { vars = [], args = vector [word32, word32], result = word32 }
  | typeOf (Primitives.Word_mod Primitives.W64) = { vars = [], args = vector [word64, word64], result = word64 }
  | typeOf (Primitives.Word_div_unchecked Primitives.WORD) = { vars = [], args = vector [word, word], result = word }
  | typeOf (Primitives.Word_div_unchecked Primitives.W32) = { vars = [], args = vector [word32, word32], result = word32 }
  | typeOf (Primitives.Word_div_unchecked Primitives.W64) = { vars = [], args = vector [word64, word64], result = word64 }
  | typeOf (Primitives.Word_mod_unchecked Primitives.WORD) = { vars = [], args = vector [word, word], result = word }
  | typeOf (Primitives.Word_mod_unchecked Primitives.W32) = { vars = [], args = vector [word32, word32], result = word32 }
  | typeOf (Primitives.Word_mod_unchecked Primitives.W64) = { vars = [], args = vector [word64, word64], result = word64 }
  | typeOf (Primitives.Word_LT Primitives.WORD) = { vars = [], args = vector [word, word], result = bool }
  | typeOf (Primitives.Word_LT Primitives.W32) = { vars = [], args = vector [word32, word32], result = bool }
  | typeOf (Primitives.Word_LT Primitives.W64) = { vars = [], args = vector [word64, word64], result = bool }
  | typeOf (Primitives.Word_LE Primitives.WORD) = { vars = [], args = vector [word, word], result = bool }
  | typeOf (Primitives.Word_LE Primitives.W32) = { vars = [], args = vector [word32, word32], result = bool }
  | typeOf (Primitives.Word_LE Primitives.W64) = { vars = [], args = vector [word64, word64], result = bool }
  | typeOf (Primitives.Word_GT Primitives.WORD) = { vars = [], args = vector [word, word], result = bool }
  | typeOf (Primitives.Word_GT Primitives.W32) = { vars = [], args = vector [word32, word32], result = bool }
  | typeOf (Primitives.Word_GT Primitives.W64) = { vars = [], args = vector [word64, word64], result = bool }
  | typeOf (Primitives.Word_GE Primitives.WORD) = { vars = [], args = vector [word, word], result = bool }
  | typeOf (Primitives.Word_GE Primitives.W32) = { vars = [], args = vector [word32, word32], result = bool }
  | typeOf (Primitives.Word_GE Primitives.W64) = { vars = [], args = vector [word64, word64], result = bool }
  | typeOf (Primitives.Word_notb Primitives.WORD) = { vars = [], args = vector [word], result = word }
  | typeOf (Primitives.Word_notb Primitives.W32) = { vars = [], args = vector [word32], result = word32 }
  | typeOf (Primitives.Word_notb Primitives.W64) = { vars = [], args = vector [word64], result = word64 }
  | typeOf (Primitives.Word_andb Primitives.WORD) = { vars = [], args = vector [word, word], result = word }
  | typeOf (Primitives.Word_andb Primitives.W32) = { vars = [], args = vector [word32, word32], result = word32 }
  | typeOf (Primitives.Word_andb Primitives.W64) = { vars = [], args = vector [word64, word64], result = word64 }
  | typeOf (Primitives.Word_orb Primitives.WORD) = { vars = [], args = vector [word, word], result = word }
  | typeOf (Primitives.Word_orb Primitives.W32) = { vars = [], args = vector [word32, word32], result = word32 }
  | typeOf (Primitives.Word_orb Primitives.W64) = { vars = [], args = vector [word64, word64], result = word64 }
  | typeOf (Primitives.Word_xorb Primitives.WORD) = { vars = [], args = vector [word, word], result = word }
  | typeOf (Primitives.Word_xorb Primitives.W32) = { vars = [], args = vector [word32, word32], result = word32 }
  | typeOf (Primitives.Word_xorb Primitives.W64) = { vars = [], args = vector [word64, word64], result = word64 }
  | typeOf (Primitives.Word_LSHIFT_unchecked (Primitives.WORD, Primitives.WORD)) = { vars = [], args = vector [word, word], result = word }
  | typeOf (Primitives.Word_LSHIFT_unchecked (Primitives.WORD, Primitives.W32)) = { vars = [], args = vector [word, word32], result = word }
  | typeOf (Primitives.Word_LSHIFT_unchecked (Primitives.WORD, Primitives.W64)) = { vars = [], args = vector [word, word64], result = word }
  | typeOf (Primitives.Word_LSHIFT_unchecked (Primitives.W32, Primitives.WORD)) = { vars = [], args = vector [word32, word], result = word32 }
  | typeOf (Primitives.Word_LSHIFT_unchecked (Primitives.W32, Primitives.W32)) = { vars = [], args = vector [word32, word32], result = word32 }
  | typeOf (Primitives.Word_LSHIFT_unchecked (Primitives.W32, Primitives.W64)) = { vars = [], args = vector [word32, word64], result = word32 }
  | typeOf (Primitives.Word_LSHIFT_unchecked (Primitives.W64, Primitives.WORD)) = { vars = [], args = vector [word64, word], result = word64 }
  | typeOf (Primitives.Word_LSHIFT_unchecked (Primitives.W64, Primitives.W32)) = { vars = [], args = vector [word64, word32], result = word64 }
  | typeOf (Primitives.Word_LSHIFT_unchecked (Primitives.W64, Primitives.W64)) = { vars = [], args = vector [word64, word64], result = word64 }
  | typeOf (Primitives.Word_RSHIFT_unchecked (Primitives.WORD, Primitives.WORD)) = { vars = [], args = vector [word, word], result = word }
  | typeOf (Primitives.Word_RSHIFT_unchecked (Primitives.WORD, Primitives.W32)) = { vars = [], args = vector [word, word32], result = word }
  | typeOf (Primitives.Word_RSHIFT_unchecked (Primitives.WORD, Primitives.W64)) = { vars = [], args = vector [word, word64], result = word }
  | typeOf (Primitives.Word_RSHIFT_unchecked (Primitives.W32, Primitives.WORD)) = { vars = [], args = vector [word32, word], result = word32 }
  | typeOf (Primitives.Word_RSHIFT_unchecked (Primitives.W32, Primitives.W32)) = { vars = [], args = vector [word32, word32], result = word32 }
  | typeOf (Primitives.Word_RSHIFT_unchecked (Primitives.W32, Primitives.W64)) = { vars = [], args = vector [word32, word64], result = word32 }
  | typeOf (Primitives.Word_RSHIFT_unchecked (Primitives.W64, Primitives.WORD)) = { vars = [], args = vector [word64, word], result = word64 }
  | typeOf (Primitives.Word_RSHIFT_unchecked (Primitives.W64, Primitives.W32)) = { vars = [], args = vector [word64, word32], result = word64 }
  | typeOf (Primitives.Word_RSHIFT_unchecked (Primitives.W64, Primitives.W64)) = { vars = [], args = vector [word64, word64], result = word64 }
  | typeOf Primitives.Real_PLUS = { vars = [], args = vector [real, real], result = real }
  | typeOf Primitives.Real_MINUS = { vars = [], args = vector [real, real], result = real }
  | typeOf Primitives.Real_TIMES = { vars = [], args = vector [real, real], result = real }
  | typeOf Primitives.Real_DIVIDE = { vars = [], args = vector [real, real], result = real }
  | typeOf Primitives.Real_TILDE = { vars = [], args = vector [real], result = real }
  | typeOf Primitives.Real_LT = { vars = [], args = vector [real, real], result = bool }
  | typeOf Primitives.Real_LE = { vars = [], args = vector [real, real], result = bool }
  | typeOf Primitives.Real_GT = { vars = [], args = vector [real, real], result = bool }
  | typeOf Primitives.Real_GE = { vars = [], args = vector [real, real], result = bool }
  | typeOf Primitives.Char_EQUAL = { vars = [], args = vector [char, char], result = bool }
  | typeOf Primitives.Char_LT = { vars = [], args = vector [char, char], result = bool }
  | typeOf Primitives.Char_LE = { vars = [], args = vector [char, char], result = bool }
  | typeOf Primitives.Char_GT = { vars = [], args = vector [char, char], result = bool }
  | typeOf Primitives.Char_GE = { vars = [], args = vector [char, char], result = bool }
  | typeOf Primitives.Char16_EQUAL = { vars = [], args = vector [char16, char16], result = bool }
  | typeOf Primitives.Char16_LT = { vars = [], args = vector [char16, char16], result = bool }
  | typeOf Primitives.Char16_LE = { vars = [], args = vector [char16, char16], result = bool }
  | typeOf Primitives.Char16_GT = { vars = [], args = vector [char16, char16], result = bool }
  | typeOf Primitives.Char16_GE = { vars = [], args = vector [char16, char16], result = bool }
  | typeOf Primitives.String_EQUAL = { vars = [], args = vector [string, string], result = bool }
  | typeOf Primitives.String_LT = { vars = [], args = vector [string, string], result = bool }
  | typeOf Primitives.String_LE = { vars = [], args = vector [string, string], result = bool }
  | typeOf Primitives.String_GT = { vars = [], args = vector [string, string], result = bool }
  | typeOf Primitives.String_GE = { vars = [], args = vector [string, string], result = bool }
  | typeOf Primitives.String_HAT = { vars = [], args = vector [string, string], result = string }
  | typeOf (Primitives.String_size Primitives.INT) = { vars = [], args = vector [string], result = int }
  | typeOf (Primitives.String_size Primitives.I32) = { vars = [], args = vector [string], result = int32 }
  | typeOf (Primitives.String_size Primitives.I54) = { vars = [], args = vector [string], result = int54 }
  | typeOf (Primitives.String_size Primitives.I64) = { vars = [], args = vector [string], result = int64 }
  | typeOf Primitives.String_str = { vars = [], args = vector [char], result = string }
  | typeOf Primitives.String16_EQUAL = { vars = [], args = vector [string16, string16], result = bool }
  | typeOf Primitives.String16_LT = { vars = [], args = vector [string16, string16], result = bool }
  | typeOf Primitives.String16_LE = { vars = [], args = vector [string16, string16], result = bool }
  | typeOf Primitives.String16_GT = { vars = [], args = vector [string16, string16], result = bool }
  | typeOf Primitives.String16_GE = { vars = [], args = vector [string16, string16], result = bool }
  | typeOf Primitives.String16_HAT = { vars = [], args = vector [string16, string16], result = string16 }
  | typeOf (Primitives.String16_size Primitives.INT) = { vars = [], args = vector [string16], result = int }
  | typeOf (Primitives.String16_size Primitives.I32) = { vars = [], args = vector [string16], result = int32 }
  | typeOf (Primitives.String16_size Primitives.I54) = { vars = [], args = vector [string16], result = int54 }
  | typeOf (Primitives.String16_size Primitives.I64) = { vars = [], args = vector [string16], result = int64 }
  | typeOf Primitives.String16_str = { vars = [], args = vector [char16], result = string16 }
  | typeOf Primitives.IntInf_EQUAL = { vars = [], args = vector [intInf, intInf], result = bool }
  | typeOf Primitives.IntInf_PLUS = { vars = [], args = vector [intInf, intInf], result = intInf }
  | typeOf Primitives.IntInf_MINUS = { vars = [], args = vector [intInf, intInf], result = intInf }
  | typeOf Primitives.IntInf_TIMES = { vars = [], args = vector [intInf, intInf], result = intInf }
  | typeOf Primitives.IntInf_TILDE = { vars = [], args = vector [intInf], result = intInf }
  | typeOf Primitives.IntInf_LT = { vars = [], args = vector [intInf, intInf], result = bool }
  | typeOf Primitives.IntInf_LE = { vars = [], args = vector [intInf, intInf], result = bool }
  | typeOf Primitives.IntInf_GT = { vars = [], args = vector [intInf, intInf], result = bool }
  | typeOf Primitives.IntInf_GE = { vars = [], args = vector [intInf, intInf], result = bool }
  | typeOf Primitives.IntInf_andb = { vars = [], args = vector [intInf, intInf], result = intInf }
  | typeOf Primitives.IntInf_orb = { vars = [], args = vector [intInf, intInf], result = intInf }
  | typeOf Primitives.IntInf_xorb = { vars = [], args = vector [intInf, intInf], result = intInf }
  | typeOf Primitives.IntInf_notb = { vars = [], args = vector [intInf], result = intInf }
  | typeOf Primitives.IntInf_quot_unchecked = { vars = [], args = vector [intInf, intInf], result = intInf }
  | typeOf Primitives.IntInf_rem_unchecked = { vars = [], args = vector [intInf, intInf], result = intInf }
  | typeOf (Primitives.Vector_length Primitives.INT) = { vars = [(tyVarA, [])], args = vector [vectorOf (tyA)], result = int }
  | typeOf (Primitives.Vector_length Primitives.I32) = { vars = [(tyVarA, [])], args = vector [vectorOf (tyA)], result = int32 }
  | typeOf (Primitives.Vector_length Primitives.I54) = { vars = [(tyVarA, [])], args = vector [vectorOf (tyA)], result = int54 }
  | typeOf (Primitives.Vector_length Primitives.I64) = { vars = [(tyVarA, [])], args = vector [vectorOf (tyA)], result = int64 }
  | typeOf (Primitives.Vector_unsafeFromListRevN Primitives.INT) = { vars = [(tyVarA, [])], args = vector [int, listOf (tyA)], result = vectorOf (tyA) }
  | typeOf (Primitives.Vector_unsafeFromListRevN Primitives.I32) = { vars = [(tyVarA, [])], args = vector [int32, listOf (tyA)], result = vectorOf (tyA) }
  | typeOf (Primitives.Vector_unsafeFromListRevN Primitives.I54) = { vars = [(tyVarA, [])], args = vector [int54, listOf (tyA)], result = vectorOf (tyA) }
  | typeOf (Primitives.Vector_unsafeFromListRevN Primitives.I64) = { vars = [(tyVarA, [])], args = vector [int64, listOf (tyA)], result = vectorOf (tyA) }
  | typeOf Primitives.Array_EQUAL = { vars = [(tyVarA, [])], args = vector [arrayOf (tyA), arrayOf (tyA)], result = bool }
  | typeOf (Primitives.Array_length Primitives.INT) = { vars = [(tyVarA, [])], args = vector [arrayOf (tyA)], result = int }
  | typeOf (Primitives.Array_length Primitives.I32) = { vars = [(tyVarA, [])], args = vector [arrayOf (tyA)], result = int32 }
  | typeOf (Primitives.Array_length Primitives.I54) = { vars = [(tyVarA, [])], args = vector [arrayOf (tyA)], result = int54 }
  | typeOf (Primitives.Array_length Primitives.I64) = { vars = [(tyVarA, [])], args = vector [arrayOf (tyA)], result = int64 }
  | typeOf Primitives.Unsafe_cast = { vars = [(tyVarA, []), (tyVarB, [])], args = vector [tyA], result = tyB }
  | typeOf (Primitives.Unsafe_Vector_sub Primitives.INT) = { vars = [(tyVarA, [])], args = vector [vectorOf (tyA), int], result = tyA }
  | typeOf (Primitives.Unsafe_Vector_sub Primitives.I32) = { vars = [(tyVarA, [])], args = vector [vectorOf (tyA), int32], result = tyA }
  | typeOf (Primitives.Unsafe_Vector_sub Primitives.I54) = { vars = [(tyVarA, [])], args = vector [vectorOf (tyA), int54], result = tyA }
  | typeOf (Primitives.Unsafe_Vector_sub Primitives.I64) = { vars = [(tyVarA, [])], args = vector [vectorOf (tyA), int64], result = tyA }
  | typeOf (Primitives.Unsafe_Array_sub Primitives.INT) = { vars = [(tyVarA, [])], args = vector [arrayOf (tyA), int], result = tyA }
  | typeOf (Primitives.Unsafe_Array_sub Primitives.I32) = { vars = [(tyVarA, [])], args = vector [arrayOf (tyA), int32], result = tyA }
  | typeOf (Primitives.Unsafe_Array_sub Primitives.I54) = { vars = [(tyVarA, [])], args = vector [arrayOf (tyA), int54], result = tyA }
  | typeOf (Primitives.Unsafe_Array_sub Primitives.I64) = { vars = [(tyVarA, [])], args = vector [arrayOf (tyA), int64], result = tyA }
  | typeOf (Primitives.Unsafe_Array_update Primitives.INT) = { vars = [(tyVarA, [])], args = vector [arrayOf (tyA), int, tyA], result = unit }
  | typeOf (Primitives.Unsafe_Array_update Primitives.I32) = { vars = [(tyVarA, [])], args = vector [arrayOf (tyA), int32, tyA], result = unit }
  | typeOf (Primitives.Unsafe_Array_update Primitives.I54) = { vars = [(tyVarA, [])], args = vector [arrayOf (tyA), int54, tyA], result = unit }
  | typeOf (Primitives.Unsafe_Array_update Primitives.I64) = { vars = [(tyVarA, [])], args = vector [arrayOf (tyA), int64, tyA], result = unit }
  | typeOf Primitives.Exception_instanceof = { vars = [], args = vector [exn, exntag], result = bool }
  | typeOf Primitives.DelimCont_newPromptTag = { vars = [(tyVarA, [])], args = vector [], result = promptTagOf (tyA) }
  | typeOf Primitives.DelimCont_pushPrompt = { vars = [(tyVarA, [])], args = vector [promptTagOf (tyA), function1Of (tyA, unit)], result = tyA }
  | typeOf Primitives.DelimCont_withSubCont = { vars = [(tyVarA, []), (tyVarB, [])], args = vector [promptTagOf (tyB), function1Of (tyB, subcontOf (tyA, tyB))], result = tyA }
  | typeOf Primitives.DelimCont_pushSubCont = { vars = [(tyVarA, []), (tyVarB, [])], args = vector [subcontOf (tyA, tyB), function1Of (tyA, unit)], result = tyB }
  | typeOf Primitives.assumeDiscardable = { vars = [(tyVarA, []), (tyVarB, [])], args = vector [function1Of (tyB, tyA), tyA], result = tyB }
  | typeOf Primitives.Lua_sub = { vars = [], args = vector [LuaValue, LuaValue], result = LuaValue }
  | typeOf Primitives.Lua_set = { vars = [], args = vector [LuaValue, LuaValue, LuaValue], result = unit }
  | typeOf Primitives.Lua_isNil = { vars = [], args = vector [LuaValue], result = bool }
  | typeOf Primitives.Lua_EQUAL = { vars = [], args = vector [LuaValue, LuaValue], result = bool }
  | typeOf Primitives.Lua_NOTEQUAL = { vars = [], args = vector [LuaValue, LuaValue], result = bool }
  | typeOf Primitives.Lua_LT = { vars = [], args = vector [LuaValue, LuaValue], result = bool }
  | typeOf Primitives.Lua_LE = { vars = [], args = vector [LuaValue, LuaValue], result = bool }
  | typeOf Primitives.Lua_GT = { vars = [], args = vector [LuaValue, LuaValue], result = bool }
  | typeOf Primitives.Lua_GE = { vars = [], args = vector [LuaValue, LuaValue], result = bool }
  | typeOf Primitives.Lua_PLUS = { vars = [], args = vector [LuaValue, LuaValue], result = LuaValue }
  | typeOf Primitives.Lua_MINUS = { vars = [], args = vector [LuaValue, LuaValue], result = LuaValue }
  | typeOf Primitives.Lua_TIMES = { vars = [], args = vector [LuaValue, LuaValue], result = LuaValue }
  | typeOf Primitives.Lua_DIVIDE = { vars = [], args = vector [LuaValue, LuaValue], result = LuaValue }
  | typeOf Primitives.Lua_INTDIV = { vars = [], args = vector [LuaValue, LuaValue], result = LuaValue }
  | typeOf Primitives.Lua_MOD = { vars = [], args = vector [LuaValue, LuaValue], result = LuaValue }
  | typeOf Primitives.Lua_pow = { vars = [], args = vector [LuaValue, LuaValue], result = LuaValue }
  | typeOf Primitives.Lua_unm = { vars = [], args = vector [LuaValue], result = LuaValue }
  | typeOf Primitives.Lua_andb = { vars = [], args = vector [LuaValue, LuaValue], result = LuaValue }
  | typeOf Primitives.Lua_orb = { vars = [], args = vector [LuaValue, LuaValue], result = LuaValue }
  | typeOf Primitives.Lua_xorb = { vars = [], args = vector [LuaValue, LuaValue], result = LuaValue }
  | typeOf Primitives.Lua_notb = { vars = [], args = vector [LuaValue], result = LuaValue }
  | typeOf Primitives.Lua_LSHIFT = { vars = [], args = vector [LuaValue, LuaValue], result = LuaValue }
  | typeOf Primitives.Lua_RSHIFT = { vars = [], args = vector [LuaValue, LuaValue], result = LuaValue }
  | typeOf Primitives.Lua_concat = { vars = [], args = vector [LuaValue, LuaValue], result = LuaValue }
  | typeOf Primitives.Lua_length = { vars = [], args = vector [LuaValue], result = LuaValue }
  | typeOf Primitives.Lua_isFalsy = { vars = [], args = vector [LuaValue], result = bool }
  | typeOf Primitives.Lua_call = { vars = [], args = vector [LuaValue, vectorOf (LuaValue)], result = vectorOf (LuaValue) }
  | typeOf Primitives.Lua_call1 = { vars = [], args = vector [LuaValue, vectorOf (LuaValue)], result = LuaValue }
  | typeOf Primitives.Lua_call2 = { vars = [], args = vector [LuaValue, vectorOf (LuaValue)], result = pairOf (LuaValue, LuaValue) }
  | typeOf Primitives.Lua_call3 = { vars = [], args = vector [LuaValue, vectorOf (LuaValue)], result = tupleOf [LuaValue, LuaValue, LuaValue] }
  | typeOf Primitives.Lua_method = { vars = [], args = vector [LuaValue, string, vectorOf (LuaValue)], result = vectorOf (LuaValue) }
  | typeOf Primitives.Lua_global = { vars = [], args = vector [string], result = LuaValue }
  | typeOf Primitives.Lua_setGlobal = { vars = [], args = vector [string, LuaValue], result = unit }
  | typeOf Primitives.Lua_newTable = { vars = [], args = vector [], result = LuaValue }
  | typeOf Primitives.JavaScript_sub = { vars = [], args = vector [JavaScriptValue, JavaScriptValue], result = JavaScriptValue }
  | typeOf Primitives.JavaScript_set = { vars = [], args = vector [JavaScriptValue, JavaScriptValue, JavaScriptValue], result = unit }
  | typeOf Primitives.JavaScript_EQUAL = { vars = [], args = vector [JavaScriptValue, JavaScriptValue], result = bool }
  | typeOf Primitives.JavaScript_NOTEQUAL = { vars = [], args = vector [JavaScriptValue, JavaScriptValue], result = bool }
  | typeOf Primitives.JavaScript_LT = { vars = [], args = vector [JavaScriptValue, JavaScriptValue], result = bool }
  | typeOf Primitives.JavaScript_LE = { vars = [], args = vector [JavaScriptValue, JavaScriptValue], result = bool }
  | typeOf Primitives.JavaScript_GT = { vars = [], args = vector [JavaScriptValue, JavaScriptValue], result = bool }
  | typeOf Primitives.JavaScript_GE = { vars = [], args = vector [JavaScriptValue, JavaScriptValue], result = bool }
  | typeOf Primitives.JavaScript_PLUS = { vars = [], args = vector [JavaScriptValue, JavaScriptValue], result = JavaScriptValue }
  | typeOf Primitives.JavaScript_MINUS = { vars = [], args = vector [JavaScriptValue, JavaScriptValue], result = JavaScriptValue }
  | typeOf Primitives.JavaScript_TIMES = { vars = [], args = vector [JavaScriptValue, JavaScriptValue], result = JavaScriptValue }
  | typeOf Primitives.JavaScript_DIVIDE = { vars = [], args = vector [JavaScriptValue, JavaScriptValue], result = JavaScriptValue }
  | typeOf Primitives.JavaScript_MOD = { vars = [], args = vector [JavaScriptValue, JavaScriptValue], result = JavaScriptValue }
  | typeOf Primitives.JavaScript_negate = { vars = [], args = vector [JavaScriptValue], result = JavaScriptValue }
  | typeOf Primitives.JavaScript_andb = { vars = [], args = vector [JavaScriptValue, JavaScriptValue], result = JavaScriptValue }
  | typeOf Primitives.JavaScript_orb = { vars = [], args = vector [JavaScriptValue, JavaScriptValue], result = JavaScriptValue }
  | typeOf Primitives.JavaScript_xorb = { vars = [], args = vector [JavaScriptValue, JavaScriptValue], result = JavaScriptValue }
  | typeOf Primitives.JavaScript_notb = { vars = [], args = vector [JavaScriptValue], result = JavaScriptValue }
  | typeOf Primitives.JavaScript_LSHIFT = { vars = [], args = vector [JavaScriptValue, JavaScriptValue], result = JavaScriptValue }
  | typeOf Primitives.JavaScript_RSHIFT = { vars = [], args = vector [JavaScriptValue, JavaScriptValue], result = JavaScriptValue }
  | typeOf Primitives.JavaScript_URSHIFT = { vars = [], args = vector [JavaScriptValue, JavaScriptValue], result = JavaScriptValue }
  | typeOf Primitives.JavaScript_EXP = { vars = [], args = vector [JavaScriptValue, JavaScriptValue], result = JavaScriptValue }
  | typeOf Primitives.JavaScript_isFalsy = { vars = [], args = vector [JavaScriptValue], result = bool }
  | typeOf Primitives.JavaScript_typeof = { vars = [], args = vector [JavaScriptValue], result = string16 }
  | typeOf Primitives.JavaScript_global = { vars = [], args = vector [string16], result = JavaScriptValue }
  | typeOf Primitives.JavaScript_setGlobal = { vars = [], args = vector [string16, JavaScriptValue], result = unit }
  | typeOf Primitives.JavaScript_call = { vars = [], args = vector [JavaScriptValue, vectorOf (JavaScriptValue)], result = JavaScriptValue }
  | typeOf Primitives.JavaScript_method = { vars = [], args = vector [JavaScriptValue, string16, vectorOf (JavaScriptValue)], result = JavaScriptValue }
  | typeOf Primitives.JavaScript_new = { vars = [], args = vector [JavaScriptValue, vectorOf (JavaScriptValue)], result = JavaScriptValue }
end;
