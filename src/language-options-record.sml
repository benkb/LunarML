(* -*- mode: sml; mode: read-only -*- *)
(* This file was generated by util/record.lua. Do not edit by hand! *)
structure LanguageOptionsRecord = struct
  structure set = struct
     val allowExtendedNumConsts = fn allowExtendedNumConsts => fn { allowExtendedNumConsts = _, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val allowExtendedTextConsts = fn allowExtendedTextConsts => fn { allowExtendedNumConsts, allowExtendedTextConsts = _, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val allowSigWithtype = fn allowSigWithtype => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype = _, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val allowVectorExps = fn allowVectorExps => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps = _, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val allowVectorPats = fn allowVectorPats => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats = _, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val allowRecordExtension = fn allowRecordExtension => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension = _, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val allowRecordUpdate = fn allowRecordUpdate => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate = _, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val allowUtfEscapeSequences = fn allowUtfEscapeSequences => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences = _, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val allowHexFloatConsts = fn allowHexFloatConsts => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts = _, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val allowValRecTyVars = fn allowValRecTyVars => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars = _, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val allowValTyVarsRec = fn allowValTyVarsRec => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec = _, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val allowFreeTyVarsInDatatypeDec = fn allowFreeTyVarsInDatatypeDec => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = _, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val allowWhereAndType = fn allowWhereAndType => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType = _, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val allowPrim = fn allowPrim => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim = _, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val allowBindEqual = fn allowBindEqual => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual = _, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val allowOverload = fn allowOverload => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload = _, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val allowInfixingDot = fn allowInfixingDot => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot = _, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val nonexhaustiveBind = fn nonexhaustiveBind => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind = _, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val nonexhaustiveMatch = fn nonexhaustiveMatch => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch = _, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val nonexhaustiveRaise = fn nonexhaustiveRaise => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise = _, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val redundantBind = fn redundantBind => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind = _, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val redundantMatch = fn redundantMatch => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch = _, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val redundantRaise = fn redundantRaise => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise = _ } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
  end
  structure update = struct
     val allowExtendedNumConsts = fn f => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = f allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val allowExtendedTextConsts = fn f => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = f allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val allowSigWithtype = fn f => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = f allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val allowVectorExps = fn f => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = f allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val allowVectorPats = fn f => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = f allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val allowRecordExtension = fn f => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = f allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val allowRecordUpdate = fn f => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = f allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val allowUtfEscapeSequences = fn f => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = f allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val allowHexFloatConsts = fn f => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = f allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val allowValRecTyVars = fn f => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = f allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val allowValTyVarsRec = fn f => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = f allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val allowFreeTyVarsInDatatypeDec = fn f => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = f allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val allowWhereAndType = fn f => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = f allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val allowPrim = fn f => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = f allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val allowBindEqual = fn f => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = f allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val allowOverload = fn f => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = f allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val allowInfixingDot = fn f => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = f allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val nonexhaustiveBind = fn f => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = f nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val nonexhaustiveMatch = fn f => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = f nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val nonexhaustiveRaise = fn f => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = f nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val redundantBind = fn f => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = f redundantBind, redundantMatch = redundantMatch, redundantRaise = redundantRaise }
     val redundantMatch = fn f => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = f redundantMatch, redundantRaise = redundantRaise }
     val redundantRaise = fn f => fn { allowExtendedNumConsts, allowExtendedTextConsts, allowSigWithtype, allowVectorExps, allowVectorPats, allowRecordExtension, allowRecordUpdate, allowUtfEscapeSequences, allowHexFloatConsts, allowValRecTyVars, allowValTyVarsRec, allowFreeTyVarsInDatatypeDec, allowWhereAndType, allowPrim, allowBindEqual, allowOverload, allowInfixingDot, nonexhaustiveBind, nonexhaustiveMatch, nonexhaustiveRaise, redundantBind, redundantMatch, redundantRaise } => { allowExtendedNumConsts = allowExtendedNumConsts, allowExtendedTextConsts = allowExtendedTextConsts, allowSigWithtype = allowSigWithtype, allowVectorExps = allowVectorExps, allowVectorPats = allowVectorPats, allowRecordExtension = allowRecordExtension, allowRecordUpdate = allowRecordUpdate, allowUtfEscapeSequences = allowUtfEscapeSequences, allowHexFloatConsts = allowHexFloatConsts, allowValRecTyVars = allowValRecTyVars, allowValTyVarsRec = allowValTyVarsRec, allowFreeTyVarsInDatatypeDec = allowFreeTyVarsInDatatypeDec, allowWhereAndType = allowWhereAndType, allowPrim = allowPrim, allowBindEqual = allowBindEqual, allowOverload = allowOverload, allowInfixingDot = allowInfixingDot, nonexhaustiveBind = nonexhaustiveBind, nonexhaustiveMatch = nonexhaustiveMatch, nonexhaustiveRaise = nonexhaustiveRaise, redundantBind = redundantBind, redundantMatch = redundantMatch, redundantRaise = f redundantRaise }
  end
end;
